{"version":3,"file":"index.cjs","sources":["../src/getHTMLFromFragment.ts","../src/generateHTML.ts","../src/generateJSON.ts"],"sourcesContent":["import { DOMSerializer, Node, Schema } from '@tiptap/pm/model'\nimport { createHTMLDocument, VHTMLDocument } from 'zeed-dom'\n\n/**\n * Returns the HTML string representation of a given document node.\n *\n * @param doc - The document node to serialize.\n * @param schema - The Prosemirror schema to use for serialization.\n * @returns The HTML string representation of the document fragment.\n *\n * @example\n * ```typescript\n * const html = getHTMLFromFragment(doc, schema)\n * ```\n */\nexport function getHTMLFromFragment(doc: Node, schema: Schema, options?: { document?: Document }): string {\n  if (options?.document) {\n    // The caller is relying on their own document implementation. Use this\n    // instead of the default zeed-dom.\n    const wrap = options.document.createElement('div')\n\n    DOMSerializer.fromSchema(schema).serializeFragment(doc.content, { document: options.document }, wrap)\n    return wrap.innerHTML\n  }\n\n  // Use zeed-dom for serialization.\n  const zeedDocument = DOMSerializer.fromSchema(schema).serializeFragment(doc.content, {\n    document: createHTMLDocument() as unknown as Document,\n  }) as unknown as VHTMLDocument\n\n  return zeedDocument.render()\n}\n","import { Extensions, getSchema, JSONContent } from '@tiptap/core'\nimport { Node } from '@tiptap/pm/model'\n\nimport { getHTMLFromFragment } from './getHTMLFromFragment.js'\n\n/**\n * Generates HTML from a ProseMirror JSON content object.\n * @param doc - The ProseMirror JSON content object.\n * @param extensions - The Tiptap extensions used to build the schema.\n * @returns The generated HTML string.\n * @example\n * const doc = {\n *   type: 'doc',\n *   content: [\n *     {\n *       type: 'paragraph',\n *       content: [\n *         {\n *           type: 'text',\n *           text: 'Hello world!'\n *         }\n *       ]\n *     }\n *   ]\n * }\n * const extensions = [...]\n * const html = generateHTML(doc, extensions)\n */\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode, schema)\n}\n","import { Extensions, getSchema } from '@tiptap/core'\nimport { DOMParser, ParseOptions } from '@tiptap/pm/model'\nimport { parseHTML } from 'zeed-dom'\n\n/**\n * Generates a JSON object from the given HTML string and converts it into a Prosemirror node with content.\n * @param {string} html - The HTML string to be converted into a Prosemirror node.\n * @param {Extensions} extensions - The extensions to be used for generating the schema.\n * @param {ParseOptions} options - The options to be supplied to the parser.\n * @returns {Record<string, any>} - The generated JSON object.\n * @example\n * const html = '<p>Hello, world!</p>'\n * const extensions = [...]\n * const json = generateJSON(html, extensions)\n * console.log(json) // { type: 'doc', content: [{ type: 'paragraph', content: [{ type: 'text', text: 'Hello, world!' }] }] }\n */\nexport function generateJSON(html: string, extensions: Extensions, options?: ParseOptions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = parseHTML(html) as unknown as Node\n\n  return DOMParser.fromSchema(schema).parse(dom, options).toJSON()\n}\n"],"names":["DOMSerializer","createHTMLDocument","getSchema","Node","parseHTML","DOMParser"],"mappings":";;;;;;AAGA;;;;;;;;;;;AAWG;SACa,mBAAmB,CAAC,GAAS,EAAE,MAAc,EAAE,OAAiC,EAAA;;AAW9F,IAAA,MAAM,YAAY,GAAGA,mBAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE;QACnF,QAAQ,EAAEC,0BAAkB,EAAyB;AACtD,KAAA,CAA6B;AAE9B,IAAA,OAAO,YAAY,CAAC,MAAM,EAAE;AAC9B;;AC1BA;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACa,SAAA,YAAY,CAAC,GAAgB,EAAE,UAAsB,EAAA;AACnE,IAAA,MAAM,MAAM,GAAGC,cAAS,CAAC,UAAU,CAAC;IACpC,MAAM,WAAW,GAAGC,UAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC;AAE9C,IAAA,OAAO,mBAAmB,CAAC,WAAW,EAAE,MAAM,CAAC;AACjD;;AC7BA;;;;;;;;;;;AAWG;SACa,YAAY,CAAC,IAAY,EAAE,UAAsB,EAAE,OAAsB,EAAA;AACvF,IAAA,MAAM,MAAM,GAAGD,cAAS,CAAC,UAAU,CAAC;AACpC,IAAA,MAAM,GAAG,GAAGE,iBAAS,CAAC,IAAI,CAAoB;AAE9C,IAAA,OAAOC,eAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,MAAM,EAAE;AAClE;;;;;"}