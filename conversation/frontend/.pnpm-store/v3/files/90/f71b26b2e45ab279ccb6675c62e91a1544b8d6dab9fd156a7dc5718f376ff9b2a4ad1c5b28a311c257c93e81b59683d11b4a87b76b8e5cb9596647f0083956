{"version":3,"file":"video.js","sources":["../../src/video/video.ts"],"sourcesContent":["import { mergeAttributes, Node, nodeInputRule } from '@tiptap/core';\n\nexport interface VideoOptions {\n  url: string;\n  width: number;\n  height: number;\n  HTMLAttributes: Record<string, any>;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    video: {\n      /**\n       * Set a video node\n       * @param options.updateSelection set to true will select the newly inserted content\n       */\n      setVideo: (\n        id: string,\n        src: string,\n        isCaptation: boolean,\n        width?: number,\n        height?: number,\n        controls?: boolean,\n        controlslist?: string,\n        options?: { updateSelection: boolean },\n      ) => ReturnType;\n      /**\n       * Toggle a video\n       */\n      toggleVideo: (src: string) => ReturnType;\n    };\n  }\n}\n\nconst VIDEO_INPUT_REGEX = /!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\)/;\n\nexport const Video = Node.create({\n  name: 'video',\n  group: 'block',\n  draggable: true,\n  selectable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n        parseHTML: (el: any) => (el as HTMLSpanElement).getAttribute('src'),\n        renderHTML: (attrs: any) => ({ src: attrs.src }),\n      },\n      controls: {\n        default: true,\n        parseHTML: (el: any) => {\n          if ((el as HTMLSpanElement).getAttribute('controls')) {\n            return (el as HTMLSpanElement).getAttribute('controls');\n          } else if ((el as HTMLSpanElement).hasAttribute('controls')) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        renderHTML: (attrs: any) => ({ controls: attrs.controls }),\n      },\n      documentId: {\n        default: '',\n        renderHTML: (attributes: any) => {\n          return { 'data-document-id': attributes.documentId };\n        },\n        parseHTML: (element: any) => element.getAttribute('data-document-id'),\n      },\n      isCaptation: {\n        default: false,\n        renderHTML: (attributes: any) => {\n          return { 'data-document-is-captation': attributes.isCaptation };\n        },\n        parseHTML: (element: any) =>\n          element.getAttribute('data-document-is-captation'),\n      },\n      videoResolution: {\n        default: '404x720',\n        renderHTML: (attributes: any) => {\n          return { 'data-video-resolution': attributes.videoResolution };\n        },\n        parseHTML: (element: any) =>\n          element.getAttribute('data-video-resolution'),\n      },\n      width: {\n        renderHTML: (attributes: any) => {\n          return {\n            width: parseInt(attributes.width),\n          };\n        },\n        parseHTML: (element) => element.getAttribute('width'),\n      },\n      height: {\n        renderHTML: (attributes: any) => {\n          return {\n            height: parseInt(attributes.height),\n          };\n        },\n        parseHTML: (element) => element.getAttribute('height'),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'div.video-wrapper>video,video',\n        getAttrs: (el: any) => ({\n          src: (el as HTMLVideoElement).getAttribute('src'),\n        }),\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      'div',\n      { class: 'video-wrapper' },\n      ['video', mergeAttributes(HTMLAttributes)],\n    ];\n  },\n\n  addCommands() {\n    return {\n      setVideo:\n        (\n          id: string,\n          src: string,\n          isCaptation: boolean,\n          width = 350,\n          height = 197,\n          controls = true,\n          controlslist = 'nodownload',\n          options,\n        ) =>\n        ({ commands, state }) => {\n          return commands.insertContentAt(\n            state.selection,\n            `<video \n              controls=\"${controls}\" \n              controlslist=\"${controlslist}\"\n              src=\"${src}\" \n              width=\"${width}\"\n              height=\"${height}\"\n              data-document-id=\"${id}\" \n              data-document-is-captation=\"${isCaptation}\"\n              data-video-resolution=\"${width}x${height}\" />`,\n            options,\n          );\n        },\n\n      toggleVideo:\n        () =>\n        ({ commands }) =>\n          commands.toggleNode(this.name, 'paragraph'),\n    };\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: VIDEO_INPUT_REGEX,\n        type: this.type,\n        getAttributes: (match) => {\n          const [, , src] = match;\n\n          return { src };\n        },\n      }),\n    ];\n  },\n});\n"],"names":[],"mappings":"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"}