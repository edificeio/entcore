{"version":3,"file":"video.cjs","sources":["../../src/video/video.ts"],"sourcesContent":["import { mergeAttributes, Node, nodeInputRule } from '@tiptap/core';\n\nexport interface VideoOptions {\n  url: string;\n  width: number;\n  height: number;\n  HTMLAttributes: Record<string, any>;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    video: {\n      /**\n       * Set a video node\n       * @param options.updateSelection set to true will select the newly inserted content\n       */\n      setVideo: (\n        id: string,\n        src: string,\n        isCaptation: boolean,\n        width?: number,\n        height?: number,\n        controls?: boolean,\n        controlslist?: string,\n        options?: { updateSelection: boolean },\n      ) => ReturnType;\n      /**\n       * Toggle a video\n       */\n      toggleVideo: (src: string) => ReturnType;\n    };\n  }\n}\n\nconst VIDEO_INPUT_REGEX = /!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\)/;\n\nexport const Video = Node.create({\n  name: 'video',\n  group: 'block',\n  draggable: true,\n  selectable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n        parseHTML: (el: any) => (el as HTMLSpanElement).getAttribute('src'),\n        renderHTML: (attrs: any) => ({ src: attrs.src }),\n      },\n      controls: {\n        default: true,\n        parseHTML: (el: any) => {\n          if ((el as HTMLSpanElement).getAttribute('controls')) {\n            return (el as HTMLSpanElement).getAttribute('controls');\n          } else if ((el as HTMLSpanElement).hasAttribute('controls')) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n        renderHTML: (attrs: any) => ({ controls: attrs.controls }),\n      },\n      documentId: {\n        default: '',\n        renderHTML: (attributes: any) => {\n          return { 'data-document-id': attributes.documentId };\n        },\n        parseHTML: (element: any) => element.getAttribute('data-document-id'),\n      },\n      isCaptation: {\n        default: false,\n        renderHTML: (attributes: any) => {\n          return { 'data-document-is-captation': attributes.isCaptation };\n        },\n        parseHTML: (element: any) =>\n          element.getAttribute('data-document-is-captation'),\n      },\n      videoResolution: {\n        default: '404x720',\n        renderHTML: (attributes: any) => {\n          return { 'data-video-resolution': attributes.videoResolution };\n        },\n        parseHTML: (element: any) =>\n          element.getAttribute('data-video-resolution'),\n      },\n      width: {\n        renderHTML: (attributes: any) => {\n          return {\n            width: parseInt(attributes.width),\n          };\n        },\n        parseHTML: (element) => element.getAttribute('width'),\n      },\n      height: {\n        renderHTML: (attributes: any) => {\n          return {\n            height: parseInt(attributes.height),\n          };\n        },\n        parseHTML: (element) => element.getAttribute('height'),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'div.video-wrapper>video,video',\n        getAttrs: (el: any) => ({\n          src: (el as HTMLVideoElement).getAttribute('src'),\n        }),\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      'div',\n      { class: 'video-wrapper' },\n      ['video', mergeAttributes(HTMLAttributes)],\n    ];\n  },\n\n  addCommands() {\n    return {\n      setVideo:\n        (\n          id: string,\n          src: string,\n          isCaptation: boolean,\n          width = 350,\n          height = 197,\n          controls = true,\n          controlslist = 'nodownload',\n          options,\n        ) =>\n        ({ commands, state }) => {\n          return commands.insertContentAt(\n            state.selection,\n            `<video \n              controls=\"${controls}\" \n              controlslist=\"${controlslist}\"\n              src=\"${src}\" \n              width=\"${width}\"\n              height=\"${height}\"\n              data-document-id=\"${id}\" \n              data-document-is-captation=\"${isCaptation}\"\n              data-video-resolution=\"${width}x${height}\" />`,\n            options,\n          );\n        },\n\n      toggleVideo:\n        () =>\n        ({ commands }) =>\n          commands.toggleNode(this.name, 'paragraph'),\n    };\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: VIDEO_INPUT_REGEX,\n        type: this.type,\n        getAttributes: (match) => {\n          const [, , src] = match;\n\n          return { src };\n        },\n      }),\n    ];\n  },\n});\n"],"names":["Node","mergeAttributes","nodeInputRule"],"mappings":"mHAkCM,kBAAoB,gDAEb,MAAQA,UAAK,OAAO,CAC/B,KAAM,QACN,MAAO,QACP,UAAW,GACX,WAAY,GAEZ,eAAgB,CACP,MAAA,CACL,IAAK,CACH,QAAS,KACT,UAAY,IAAa,GAAuB,aAAa,KAAK,EAClE,WAAa,QAAgB,CAAE,IAAK,MAAM,GAAI,EAChD,EACA,SAAU,CACR,QAAS,GACT,UAAY,IACL,GAAuB,aAAa,UAAU,EACzC,GAAuB,aAAa,UAAU,EAC5C,KAAuB,aAAa,UAAU,EAM5D,WAAa,QAAgB,CAAE,SAAU,MAAM,QAAS,EAC1D,EACA,WAAY,CACV,QAAS,GACT,WAAa,aACJ,CAAE,mBAAoB,WAAW,UAAW,GAErD,UAAY,SAAiB,QAAQ,aAAa,kBAAkB,CACtE,EACA,YAAa,CACX,QAAS,GACT,WAAa,aACJ,CAAE,6BAA8B,WAAW,WAAY,GAEhE,UAAY,SACV,QAAQ,aAAa,4BAA4B,CACrD,EACA,gBAAiB,CACf,QAAS,UACT,WAAa,aACJ,CAAE,wBAAyB,WAAW,eAAgB,GAE/D,UAAY,SACV,QAAQ,aAAa,uBAAuB,CAChD,EACA,MAAO,CACL,WAAa,aACJ,CACL,MAAO,SAAS,WAAW,KAAK,CAClC,GAEF,UAAY,SAAY,QAAQ,aAAa,OAAO,CACtD,EACA,OAAQ,CACN,WAAa,aACJ,CACL,OAAQ,SAAS,WAAW,MAAM,CACpC,GAEF,UAAY,SAAY,QAAQ,aAAa,QAAQ,CAAA,CAEzD,CACF,EAEA,WAAY,CACH,MAAA,CACL,CACE,IAAK,gCACL,SAAW,KAAa,CACtB,IAAM,GAAwB,aAAa,KAAK,CAClD,EAAA,CAEJ,CACF,EAEA,WAAW,CAAE,gBAAkB,CACtB,MAAA,CACL,MACA,CAAE,MAAO,eAAgB,EACzB,CAAC,QAASC,KAAgB,gBAAA,cAAc,CAAC,CAC3C,CACF,EAEA,aAAc,CACL,MAAA,CACL,SACE,CACE,GACA,IACA,YACA,MAAQ,IACR,OAAS,IACT,SAAW,GACX,aAAe,aACf,UAEF,CAAC,CAAE,SAAU,SACJ,SAAS,gBACd,MAAM,UACN;AAAA,0BACc,QAAQ;AAAA,8BACJ,YAAY;AAAA,qBACrB,GAAG;AAAA,uBACD,KAAK;AAAA,wBACJ,MAAM;AAAA,kCACI,EAAE;AAAA,4CACQ,WAAW;AAAA,uCAChB,KAAK,IAAI,MAAM,OAC1C,OACF,EAGJ,YACE,IACA,CAAC,CAAE,YACD,SAAS,WAAW,KAAK,KAAM,WAAW,CAChD,CACF,EAEA,eAAgB,CACP,MAAA,CACLC,mBAAc,CACZ,KAAM,kBACN,KAAM,KAAK,KACX,cAAgB,OAAU,CACxB,KAAM,CAAA,CAAA,CAAK,GAAG,EAAI,MAElB,MAAO,CAAE,GAAI,CAAA,CAEhB,CAAA,CACH,CAAA,CAEJ,CAAC"}