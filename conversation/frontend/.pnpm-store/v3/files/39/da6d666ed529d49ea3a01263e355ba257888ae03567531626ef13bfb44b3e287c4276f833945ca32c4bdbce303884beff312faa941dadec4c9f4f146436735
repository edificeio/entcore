{"version":3,"file":"speech-synthesis.js","sources":["../../src/speech-synthesis/speech-synthesis.ts"],"sourcesContent":["import { Node } from '@tiptap/core';\n\nexport interface SpeechSynthesisOptions {\n  lang: string;\n  pitch: number;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    speechSynthesis: {\n      startSpeechSynthesis: () => ReturnType;\n      stopSpeechSynthesis: () => ReturnType;\n    };\n  }\n}\n\nclass SS_Node<O = any, S = any> extends Node<O, S> {\n  static create<O = any, S = any>(config?: any) {\n    return Node.create(config) as SS_Node<O, S>;\n  }\n}\n\nexport const SpeechSynthesis = SS_Node.create<SpeechSynthesisOptions>({\n  name: 'speechSynthesis',\n  addOptions() {\n    return {\n      lang: 'fr-FR',\n      pitch: 1,\n    };\n  },\n  addCommands() {\n    return {\n      startSpeechSynthesis:\n        () =>\n        ({ commands }) => {\n          this.speechSynthesis = new SpeechSynthesisUtterance();\n          this.speechSynthesis.lang = this.options.lang;\n          this.speechSynthesis.pitch = this.options.pitch;\n          this.speechSynthesis.text = this.editor.getText();\n\n          window.speechSynthesis.speak(this.speechSynthesis);\n          return commands;\n        },\n      stopSpeechSynthesis:\n        () =>\n        ({ commands }) => {\n          window.speechSynthesis.cancel();\n          return commands;\n        },\n    };\n  },\n});\n"],"names":[],"mappings":";AAgBA,MAAM,gBAAkC,KAAW;AAAA,EACjD,OAAO,OAAyB,QAAc;AACrC,WAAA,KAAK,OAAO,MAAM;AAAA,EAAA;AAE7B;AAEa,MAAA,kBAAkB,QAAQ,OAA+B;AAAA,EACpE,MAAM;AAAA,EACN,aAAa;AACJ,WAAA;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,cAAc;AACL,WAAA;AAAA,MACL,sBACE,MACA,CAAC,EAAE,gBACI,KAAA,kBAAkB,IAAI,yBAAyB,GAC/C,KAAA,gBAAgB,OAAO,KAAK,QAAQ,MACpC,KAAA,gBAAgB,QAAQ,KAAK,QAAQ,OAC1C,KAAK,gBAAgB,OAAO,KAAK,OAAO,QAAQ,GAEzC,OAAA,gBAAgB,MAAM,KAAK,eAAe,GAC1C;AAAA,MAEX,qBACE,MACA,CAAC,EAAE,gBACD,OAAO,gBAAgB,OAAO,GACvB;AAAA,IAEb;AAAA,EAAA;AAEJ,CAAC;"}