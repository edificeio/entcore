{"version":3,"file":"heading.cjs","sources":["../../src/heading/heading.ts"],"sourcesContent":["import { mergeAttributes } from '@tiptap/core';\nimport { Heading } from '@tiptap/extension-heading';\nimport '@tiptap/extension-text-style';\n\nexport declare type Level = 1 | 2;\n\ninterface Options {\n  levels: Level[];\n  HTMLAttributes: Record<string, any>;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    customHeading: {\n      /**\n       * Apply Heading Level\n       */\n      setCustomHeading: (attributes: { level: Level }) => ReturnType;\n    };\n  }\n}\n\nexport const CustomHeading = Heading.extend<Options>({\n  name: 'customHeading',\n\n  addOptions() {\n    return {\n      ...this.parent?.(),\n      HTMLAttributes: {},\n    };\n  },\n\n  parseHTML() {\n    return this.options.levels.map((level: Level) => ({\n      tag: `h${level}`,\n      attrs: { level },\n    }));\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n\n    return [\n      `h${level}`,\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      0,\n    ];\n  },\n\n  addCommands() {\n    return {\n      setCustomHeading:\n        (attributes) =>\n        ({ tr, dispatch, commands }) => {\n          if (!this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n\n          const { selection } = tr;\n          const { from, to } = selection;\n\n          tr.doc.nodesBetween(from, to, (node, pos) => {\n            if (node.isBlock && from >= pos && to <= pos + node.nodeSize) {\n              /* get node content and iterate through */\n              node.content.forEach((content) => {\n                /* get content marks and iterate through */\n                content.marks.forEach((mark) => {\n                  /* find textStyle mark and if has fontSize attrs */\n                  if (\n                    mark.type.name === 'textStyle' &&\n                    mark.attrs['fontSize'] &&\n                    mark.attrs['fontSize'] !== null\n                  ) {\n                    /* remove any fontSize attr to reset heading style */\n                    tr = tr.removeMark(pos, pos + node.nodeSize, mark.type);\n                  }\n                });\n              });\n            }\n          });\n\n          if (dispatch) {\n            dispatch(tr);\n          }\n          return commands.setHeading({ level: attributes.level });\n        },\n    };\n  },\n});\n"],"names":["Heading","mergeAttributes"],"mappings":"iNAsBa,MAAA,cAAgBA,yBAAQ,OAAgB,CACnD,KAAM,gBAEN,YAAa,QACJ,MAAA,CACL,IAAG,QAAK,SAAL,0BACH,eAAgB,CAAA,CAClB,CACF,EAEA,WAAY,CACV,OAAO,KAAK,QAAQ,OAAO,IAAK,QAAkB,CAChD,IAAK,IAAI,KAAK,GACd,MAAO,CAAE,KAAM,CAAA,EACf,CACJ,EAEA,WAAW,CAAE,KAAM,gBAAkB,CAI5B,MAAA,CACL,IAJe,KAAK,QAAQ,OAAO,SAAS,KAAK,MAAM,KAAK,EACrC,KAAK,MAAM,MAAQ,KAAK,QAAQ,OAAO,CAAC,CAGtD,GACTC,KAAAA,gBAAgB,KAAK,QAAQ,eAAgB,cAAc,EAC3D,CACF,CACF,EAEA,aAAc,CACL,MAAA,CACL,iBACG,YACD,CAAC,CAAE,GAAI,SAAU,YAAe,CAC9B,GAAI,CAAC,KAAK,QAAQ,OAAO,SAAS,WAAW,KAAK,EACzC,MAAA,GAGH,KAAA,CAAE,WAAc,GAChB,CAAE,KAAM,EAAA,EAAO,UAErB,UAAG,IAAI,aAAa,KAAM,GAAI,CAAC,KAAM,MAAQ,CACvC,KAAK,SAAW,MAAQ,KAAO,IAAM,IAAM,KAAK,UAE7C,KAAA,QAAQ,QAAS,SAAY,CAExB,QAAA,MAAM,QAAS,MAAS,CAG5B,KAAK,KAAK,OAAS,aACnB,KAAK,MAAM,UACX,KAAK,MAAM,WAAgB,OAG3B,GAAK,GAAG,WAAW,IAAK,IAAM,KAAK,SAAU,KAAK,IAAI,EACxD,CACD,CAAA,CACF,CACH,CACD,EAEG,UACF,SAAS,EAAE,EAEN,SAAS,WAAW,CAAE,MAAO,WAAW,MAAO,CAAA,CAE5D,CAAA,CAEJ,CAAC"}