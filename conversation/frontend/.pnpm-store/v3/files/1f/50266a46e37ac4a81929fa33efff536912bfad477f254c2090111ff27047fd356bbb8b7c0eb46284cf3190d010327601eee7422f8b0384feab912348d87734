{"version":3,"file":"speech-recognition.cjs","sources":["../../src/speech-recognition/speech-recognition.ts"],"sourcesContent":["import { Node } from '@tiptap/core';\n\nexport interface SpeechRecognitionOptions {\n  lang: string;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    SpeechRecognition: {\n      startSpeechRecognition: () => ReturnType;\n      stopSpeechRecognition: () => ReturnType;\n      isSpeechRecognitionStarted: () => boolean;\n    };\n  }\n}\n\nclass SR_Node<O = any, S = any> extends Node<O, S> {\n  protected constructor() {\n    super();\n  }\n\n  recognition: SpeechRecognition | undefined;\n  readonly isStarted: boolean = false;\n\n  static create<O = any, S = any>(config?: any) {\n    return Node.create(config) as SR_Node<O, S>;\n  }\n}\n\nexport const SpeechRecognition = SR_Node.create<SpeechRecognitionOptions>({\n  name: 'SpeechRecognition',\n\n  addOptions() {\n    return {\n      lang: 'fr-FR',\n    };\n  },\n\n  onCreate() {\n    if (\n      !('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)\n    ) {\n      console.warn(\n        '\"@edifice.io/tiptap-extensions/speechrecognition\" requires a browser supporting the SpeechRecognition API\".',\n      );\n    }\n  },\n\n  addCommands() {\n    return {\n      startSpeechRecognition:\n        () =>\n        ({ commands }) => {\n          const SpeechRecognition =\n            window.SpeechRecognition || window.webkitSpeechRecognition;\n          this.recognition = new SpeechRecognition();\n\n          this.recognition.lang = this.options.lang;\n          this.recognition.interimResults = true;\n          this.recognition.maxAlternatives = 1;\n          this.recognition.continuous = true;\n\n          this.recognition.start();\n\n          // Memoize initial caret positions\n          let { from, to } = this.editor.state.selection;\n\n          this.recognition.onresult = (event: SpeechRecognitionEvent) => {\n            let currentResult = '';\n\n            // Add to the currentResult variable the content of the last recognized sentence\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n              currentResult += event.results[i][0].transcript;\n            }\n\n            // Is this the final recognition ?\n            const isFinal = event.results[event.results.length - 1].isFinal;\n\n            // Replace selection by the last recognized sentence (+ style and select, if not final)\n            this.editor.commands.deleteRange({ from, to });\n            this.editor.commands.insertContentAt(\n              from,\n              isFinal ? currentResult : `<code>${currentResult}</code>`,\n              { updateSelection: !isFinal },\n            );\n            to = this.editor.state.selection.to;\n\n            if (isFinal) {\n              // Next content will go after last insertion\n              from = to;\n            }\n          };\n\n          this.recognition.onerror = (event: SpeechRecognitionErrorEvent) => {\n            // TODO create a \"feedback\" tiptap extension, to display user friendly error messages ?\n            console.log(\n              `[@edifice.io/tiptap-extensions/speech-recognition][error][${event.error}]: ${event.message}`,\n            );\n          };\n\n          this.recognition.onstart = () => {\n            this.isStarted = true;\n          };\n\n          this.recognition.onend = () => {\n            this.isStarted = false;\n          };\n\n          return commands;\n        },\n\n      stopSpeechRecognition:\n        () =>\n        ({ commands }) => {\n          this.recognition.stop();\n          this.editor.commands.focus();\n          return commands;\n        },\n\n      isSpeechRecognitionStarted: () => () => this.isStarted,\n    };\n  },\n});\n"],"names":["Node","SpeechRecognition"],"mappings":"mHAgBA,MAAM,gBAAkCA,KAAAA,IAAW,CACvC,aAAc,CAChB,MAAA,EAIR,KAAS,UAAqB,EAAA,CAE9B,OAAO,OAAyB,OAAc,CACrC,OAAAA,KAAA,KAAK,OAAO,MAAM,CAAA,CAE7B,CAEa,MAAA,kBAAoB,QAAQ,OAAiC,CACxE,KAAM,oBAEN,YAAa,CACJ,MAAA,CACL,KAAM,OACR,CACF,EAEA,UAAW,CAEL,sBAAuB,QAAU,4BAA6B,QAExD,QAAA,KACN,6GACF,CAEJ,EAEA,aAAc,CACL,MAAA,CACL,uBACE,IACA,CAAC,CAAE,YAAe,CACVC,MAAAA,mBACJ,OAAO,mBAAqB,OAAO,wBAChC,KAAA,YAAc,IAAIA,mBAElB,KAAA,YAAY,KAAO,KAAK,QAAQ,KACrC,KAAK,YAAY,eAAiB,GAClC,KAAK,YAAY,gBAAkB,EACnC,KAAK,YAAY,WAAa,GAE9B,KAAK,YAAY,MAAM,EAGvB,GAAI,CAAE,KAAM,EAAA,EAAO,KAAK,OAAO,MAAM,UAEhC,YAAA,YAAY,SAAY,OAAkC,CAC7D,IAAI,cAAgB,GAGpB,QAAS,EAAI,MAAM,YAAa,EAAI,MAAM,QAAQ,OAAQ,IACxD,eAAiB,MAAM,QAAQ,CAAC,EAAE,CAAC,EAAE,WAIvC,MAAM,QAAU,MAAM,QAAQ,MAAM,QAAQ,OAAS,CAAC,EAAE,QAGxD,KAAK,OAAO,SAAS,YAAY,CAAE,KAAM,GAAI,EAC7C,KAAK,OAAO,SAAS,gBACnB,KACA,QAAU,cAAgB,SAAS,aAAa,UAChD,CAAE,gBAAiB,CAAC,OAAQ,CAC9B,EACK,GAAA,KAAK,OAAO,MAAM,UAAU,GAE7B,UAEK,KAAA,GAEX,EAEK,KAAA,YAAY,QAAW,OAAuC,CAEzD,QAAA,IACN,6DAA6D,MAAM,KAAK,MAAM,MAAM,OAAO,EAC7F,CACF,EAEK,KAAA,YAAY,QAAU,IAAM,CAC/B,KAAK,UAAY,EACnB,EAEK,KAAA,YAAY,MAAQ,IAAM,CAC7B,KAAK,UAAY,EACnB,EAEO,QACT,EAEF,sBACE,IACA,CAAC,CAAE,aACD,KAAK,YAAY,KAAK,EACjB,KAAA,OAAO,SAAS,MAAM,EACpB,UAGX,2BAA4B,IAAM,IAAM,KAAK,SAC/C,CAAA,CAEJ,CAAC"}