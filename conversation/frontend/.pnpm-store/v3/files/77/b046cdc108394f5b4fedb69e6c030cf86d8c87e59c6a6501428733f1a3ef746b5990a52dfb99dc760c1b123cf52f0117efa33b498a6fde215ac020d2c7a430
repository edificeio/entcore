import { odeServices } from "@edifice.io/client";
const convertToArray = (rights) => rights instanceof Array ? rights : [rights], checkRightForMultipleResources = async (roles, rights) => Array.isArray(roles) ? await odeServices.rights().sessionHasAtLeastOneResourceRightForEachList(roles, rights) : await odeServices.rights().sessionHasResourceRightForEachList(roles, rights), checkRights = async (roles, rights) => {
  const safeRights = convertToArray(rights);
  return Array.isArray(roles) ? await odeServices.rights().sessionHasAtLeastOneResourceRight(roles, safeRights) : await odeServices.rights().sessionHasResourceRight(roles, safeRights);
}, checkHasRights = async ({
  roles,
  rights
}) => {
  if (roles !== void 0)
    if (Array.isArray(rights))
      if (rights.length > 0) {
        if (typeof rights[0] == "string")
          return await checkRights(roles, rights);
        {
          const rightsArray = rights.map((right) => right.rights);
          return await checkRightForMultipleResources(roles, rightsArray);
        }
      } else
        return !1;
    else {
      if (typeof rights == "string")
        return await checkRights(roles, rights);
      if (rights)
        return await checkRights(roles, rights.rights);
    }
}, checkUserRight = async (rights, additionalRoles) => {
  let roles = ["contrib", "creator", "manager", "read"];
  Array.isArray(additionalRoles) ? roles = [...roles, ...additionalRoles] : additionalRoles && (roles = [...roles, additionalRoles]);
  const userRights = {
    creator: !1,
    contrib: !1,
    manager: !1,
    read: !1
  };
  for (const role of roles) {
    const hasRight = await checkHasRights({
      roles: role,
      rights
    });
    userRights[role] = hasRight;
  }
  return userRights;
};
export {
  checkUserRight
};
