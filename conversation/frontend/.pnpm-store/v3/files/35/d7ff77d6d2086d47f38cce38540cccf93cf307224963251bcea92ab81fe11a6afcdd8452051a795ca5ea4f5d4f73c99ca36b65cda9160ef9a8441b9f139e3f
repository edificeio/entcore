{"version":3,"file":"speech-recognition.js","sources":["../../src/speech-recognition/speech-recognition.ts"],"sourcesContent":["import { Node } from '@tiptap/core';\n\nexport interface SpeechRecognitionOptions {\n  lang: string;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    SpeechRecognition: {\n      startSpeechRecognition: () => ReturnType;\n      stopSpeechRecognition: () => ReturnType;\n      isSpeechRecognitionStarted: () => boolean;\n    };\n  }\n}\n\nclass SR_Node<O = any, S = any> extends Node<O, S> {\n  protected constructor() {\n    super();\n  }\n\n  recognition: SpeechRecognition | undefined;\n  readonly isStarted: boolean = false;\n\n  static create<O = any, S = any>(config?: any) {\n    return Node.create(config) as SR_Node<O, S>;\n  }\n}\n\nexport const SpeechRecognition = SR_Node.create<SpeechRecognitionOptions>({\n  name: 'SpeechRecognition',\n\n  addOptions() {\n    return {\n      lang: 'fr-FR',\n    };\n  },\n\n  onCreate() {\n    if (\n      !('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)\n    ) {\n      console.warn(\n        '\"@edifice.io/tiptap-extensions/speechrecognition\" requires a browser supporting the SpeechRecognition API\".',\n      );\n    }\n  },\n\n  addCommands() {\n    return {\n      startSpeechRecognition:\n        () =>\n        ({ commands }) => {\n          const SpeechRecognition =\n            window.SpeechRecognition || window.webkitSpeechRecognition;\n          this.recognition = new SpeechRecognition();\n\n          this.recognition.lang = this.options.lang;\n          this.recognition.interimResults = true;\n          this.recognition.maxAlternatives = 1;\n          this.recognition.continuous = true;\n\n          this.recognition.start();\n\n          // Memoize initial caret positions\n          let { from, to } = this.editor.state.selection;\n\n          this.recognition.onresult = (event: SpeechRecognitionEvent) => {\n            let currentResult = '';\n\n            // Add to the currentResult variable the content of the last recognized sentence\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n              currentResult += event.results[i][0].transcript;\n            }\n\n            // Is this the final recognition ?\n            const isFinal = event.results[event.results.length - 1].isFinal;\n\n            // Replace selection by the last recognized sentence (+ style and select, if not final)\n            this.editor.commands.deleteRange({ from, to });\n            this.editor.commands.insertContentAt(\n              from,\n              isFinal ? currentResult : `<code>${currentResult}</code>`,\n              { updateSelection: !isFinal },\n            );\n            to = this.editor.state.selection.to;\n\n            if (isFinal) {\n              // Next content will go after last insertion\n              from = to;\n            }\n          };\n\n          this.recognition.onerror = (event: SpeechRecognitionErrorEvent) => {\n            // TODO create a \"feedback\" tiptap extension, to display user friendly error messages ?\n            console.log(\n              `[@edifice.io/tiptap-extensions/speech-recognition][error][${event.error}]: ${event.message}`,\n            );\n          };\n\n          this.recognition.onstart = () => {\n            this.isStarted = true;\n          };\n\n          this.recognition.onend = () => {\n            this.isStarted = false;\n          };\n\n          return commands;\n        },\n\n      stopSpeechRecognition:\n        () =>\n        ({ commands }) => {\n          this.recognition.stop();\n          this.editor.commands.focus();\n          return commands;\n        },\n\n      isSpeechRecognitionStarted: () => () => this.isStarted,\n    };\n  },\n});\n"],"names":["SpeechRecognition"],"mappings":";AAgBA,MAAM,gBAAkC,KAAW;AAAA,EACvC,cAAc;AAChB,UAAA,GAIR,KAAS,YAAqB;AAAA,EAAA;AAAA,EAE9B,OAAO,OAAyB,QAAc;AACrC,WAAA,KAAK,OAAO,MAAM;AAAA,EAAA;AAE7B;AAEa,MAAA,oBAAoB,QAAQ,OAAiC;AAAA,EACxE,MAAM;AAAA,EAEN,aAAa;AACJ,WAAA;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,WAAW;AACT,IACI,uBAAuB,UAAU,6BAA6B,UAExD,QAAA;AAAA,MACN;AAAA,IACF;AAAA,EAEJ;AAAA,EAEA,cAAc;AACL,WAAA;AAAA,MACL,wBACE,MACA,CAAC,EAAE,eAAe;AACVA,cAAAA,qBACJ,OAAO,qBAAqB,OAAO;AAChC,aAAA,cAAc,IAAIA,mBAAkB,GAEpC,KAAA,YAAY,OAAO,KAAK,QAAQ,MACrC,KAAK,YAAY,iBAAiB,IAClC,KAAK,YAAY,kBAAkB,GACnC,KAAK,YAAY,aAAa,IAE9B,KAAK,YAAY,MAAM;AAGvB,YAAI,EAAE,MAAM,GAAA,IAAO,KAAK,OAAO,MAAM;AAEhC,oBAAA,YAAY,WAAW,CAAC,UAAkC;AAC7D,cAAI,gBAAgB;AAGpB,mBAAS,IAAI,MAAM,aAAa,IAAI,MAAM,QAAQ,QAAQ;AACxD,6BAAiB,MAAM,QAAQ,CAAC,EAAE,CAAC,EAAE;AAIvC,gBAAM,UAAU,MAAM,QAAQ,MAAM,QAAQ,SAAS,CAAC,EAAE;AAGxD,eAAK,OAAO,SAAS,YAAY,EAAE,MAAM,IAAI,GAC7C,KAAK,OAAO,SAAS;AAAA,YACnB;AAAA,YACA,UAAU,gBAAgB,SAAS,aAAa;AAAA,YAChD,EAAE,iBAAiB,CAAC,QAAQ;AAAA,UAC9B,GACK,KAAA,KAAK,OAAO,MAAM,UAAU,IAE7B,YAEK,OAAA;AAAA,QAEX,GAEK,KAAA,YAAY,UAAU,CAAC,UAAuC;AAEzD,kBAAA;AAAA,YACN,6DAA6D,MAAM,KAAK,MAAM,MAAM,OAAO;AAAA,UAC7F;AAAA,QACF,GAEK,KAAA,YAAY,UAAU,MAAM;AAC/B,eAAK,YAAY;AAAA,QACnB,GAEK,KAAA,YAAY,QAAQ,MAAM;AAC7B,eAAK,YAAY;AAAA,QACnB,GAEO;AAAA,MACT;AAAA,MAEF,uBACE,MACA,CAAC,EAAE,gBACD,KAAK,YAAY,KAAK,GACjB,KAAA,OAAO,SAAS,MAAM,GACpB;AAAA,MAGX,4BAA4B,MAAM,MAAM,KAAK;AAAA,IAC/C;AAAA,EAAA;AAEJ,CAAC;"}