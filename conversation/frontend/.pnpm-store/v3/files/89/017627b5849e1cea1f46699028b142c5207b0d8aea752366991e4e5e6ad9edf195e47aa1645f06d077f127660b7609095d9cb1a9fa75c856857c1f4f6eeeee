{"version":3,"file":"iframe.cjs","sources":["../../src/iframe/iframe.ts"],"sourcesContent":["import { Node } from '@tiptap/core';\n\nexport interface IframeOptions {\n  allowFullscreen: boolean;\n  HTMLAttributes: {\n    [key: string]: any;\n  };\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    iframe: {\n      /**\n       * Add an iframe\n       */\n      setIframe: (options: { src: string }) => ReturnType;\n    };\n  }\n}\n\nexport const Iframe = Node.create<IframeOptions>({\n  name: 'iframe',\n  group: 'block',\n  atom: true,\n  draggable: true,\n\n  addOptions() {\n    return {\n      allowFullscreen: true,\n      HTMLAttributes: {\n        class: 'iframe-wrapper',\n      },\n    };\n  },\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      frameborder: {\n        default: 0,\n      },\n      allowfullscreen: {\n        default: this.options.allowFullscreen,\n        parseHTML: () => this.options.allowFullscreen,\n      },\n      width: {\n        renderHTML: (attributes) => {\n          return attributes.width\n            ? {\n                width:\n                  attributes.width === '100%'\n                    ? '100%'\n                    : parseInt(attributes.width),\n              }\n            : {};\n        },\n        parseHTML: (element) => element.getAttribute('width'),\n      },\n      height: {\n        renderHTML: (attributes) => {\n          return attributes.height\n            ? {\n                height: parseInt(attributes.height),\n              }\n            : {};\n        },\n        parseHTML: (element) => element.getAttribute('height'),\n      },\n      style: {\n        renderHTML: (attributes) => {\n          return attributes.style\n            ? {\n                style: attributes.style,\n              }\n            : {};\n        },\n        parseHTML: (element) => element.getAttribute('style'),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'iframe',\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['div', this.options.HTMLAttributes, ['iframe', HTMLAttributes]];\n  },\n\n  addCommands() {\n    return {\n      setIframe:\n        (options: { src: string }) =>\n        ({ tr, dispatch }) => {\n          const { selection } = tr;\n          const node = this.type.create(options);\n\n          if (dispatch) {\n            tr.replaceRangeWith(selection.from, selection.to, node);\n          }\n\n          return true;\n        },\n    };\n  },\n});\n"],"names":["Node"],"mappings":"mHAoBa,OAASA,UAAK,OAAsB,CAC/C,KAAM,SACN,MAAO,QACP,KAAM,GACN,UAAW,GAEX,YAAa,CACJ,MAAA,CACL,gBAAiB,GACjB,eAAgB,CACd,MAAO,gBAAA,CAEX,CACF,EAEA,eAAgB,CACP,MAAA,CACL,IAAK,CACH,QAAS,IACX,EACA,YAAa,CACX,QAAS,CACX,EACA,gBAAiB,CACf,QAAS,KAAK,QAAQ,gBACtB,UAAW,IAAM,KAAK,QAAQ,eAChC,EACA,MAAO,CACL,WAAa,YACJ,WAAW,MACd,CACE,MACE,WAAW,QAAU,OACjB,OACA,SAAS,WAAW,KAAK,CAAA,EAEjC,CAAC,EAEP,UAAY,SAAY,QAAQ,aAAa,OAAO,CACtD,EACA,OAAQ,CACN,WAAa,YACJ,WAAW,OACd,CACE,OAAQ,SAAS,WAAW,MAAM,CAAA,EAEpC,CAAC,EAEP,UAAY,SAAY,QAAQ,aAAa,QAAQ,CACvD,EACA,MAAO,CACL,WAAa,YACJ,WAAW,MACd,CACE,MAAO,WAAW,KAAA,EAEpB,CAAC,EAEP,UAAY,SAAY,QAAQ,aAAa,OAAO,CAAA,CAExD,CACF,EAEA,WAAY,CACH,MAAA,CACL,CACE,IAAK,QAAA,CAET,CACF,EAEA,WAAW,CAAE,gBAAkB,CACtB,MAAA,CAAC,MAAO,KAAK,QAAQ,eAAgB,CAAC,SAAU,cAAc,CAAC,CACxE,EAEA,aAAc,CACL,MAAA,CACL,UACG,SACD,CAAC,CAAE,GAAI,YAAe,CACd,KAAA,CAAE,WAAc,GAChB,KAAO,KAAK,KAAK,OAAO,OAAO,EAErC,OAAI,UACF,GAAG,iBAAiB,UAAU,KAAM,UAAU,GAAI,IAAI,EAGjD,EAAA,CAEb,CAAA,CAEJ,CAAC"}