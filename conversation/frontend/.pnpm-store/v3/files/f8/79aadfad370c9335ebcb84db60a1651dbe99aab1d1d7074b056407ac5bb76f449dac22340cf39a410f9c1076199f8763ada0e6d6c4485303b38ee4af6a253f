{"version":3,"file":"heading.js","sources":["../../src/heading/heading.ts"],"sourcesContent":["import { mergeAttributes } from '@tiptap/core';\nimport { Heading } from '@tiptap/extension-heading';\nimport '@tiptap/extension-text-style';\n\nexport declare type Level = 1 | 2;\n\ninterface Options {\n  levels: Level[];\n  HTMLAttributes: Record<string, any>;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    customHeading: {\n      /**\n       * Apply Heading Level\n       */\n      setCustomHeading: (attributes: { level: Level }) => ReturnType;\n    };\n  }\n}\n\nexport const CustomHeading = Heading.extend<Options>({\n  name: 'customHeading',\n\n  addOptions() {\n    return {\n      ...this.parent?.(),\n      HTMLAttributes: {},\n    };\n  },\n\n  parseHTML() {\n    return this.options.levels.map((level: Level) => ({\n      tag: `h${level}`,\n      attrs: { level },\n    }));\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n\n    return [\n      `h${level}`,\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      0,\n    ];\n  },\n\n  addCommands() {\n    return {\n      setCustomHeading:\n        (attributes) =>\n        ({ tr, dispatch, commands }) => {\n          if (!this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n\n          const { selection } = tr;\n          const { from, to } = selection;\n\n          tr.doc.nodesBetween(from, to, (node, pos) => {\n            if (node.isBlock && from >= pos && to <= pos + node.nodeSize) {\n              /* get node content and iterate through */\n              node.content.forEach((content) => {\n                /* get content marks and iterate through */\n                content.marks.forEach((mark) => {\n                  /* find textStyle mark and if has fontSize attrs */\n                  if (\n                    mark.type.name === 'textStyle' &&\n                    mark.attrs['fontSize'] &&\n                    mark.attrs['fontSize'] !== null\n                  ) {\n                    /* remove any fontSize attr to reset heading style */\n                    tr = tr.removeMark(pos, pos + node.nodeSize, mark.type);\n                  }\n                });\n              });\n            }\n          });\n\n          if (dispatch) {\n            dispatch(tr);\n          }\n          return commands.setHeading({ level: attributes.level });\n        },\n    };\n  },\n});\n"],"names":[],"mappings":";;;AAsBa,MAAA,gBAAgB,QAAQ,OAAgB;AAAA,EACnD,MAAM;AAAA,EAEN,aAAa;;AACJ,WAAA;AAAA,MACL,IAAG,UAAK,WAAL;AAAA,MACH,gBAAgB,CAAA;AAAA,IAClB;AAAA,EACF;AAAA,EAEA,YAAY;AACV,WAAO,KAAK,QAAQ,OAAO,IAAI,CAAC,WAAkB;AAAA,MAChD,KAAK,IAAI,KAAK;AAAA,MACd,OAAO,EAAE,MAAM;AAAA,IAAA,EACf;AAAA,EACJ;AAAA,EAEA,WAAW,EAAE,MAAM,kBAAkB;AAI5B,WAAA;AAAA,MACL,IAJe,KAAK,QAAQ,OAAO,SAAS,KAAK,MAAM,KAAK,IACrC,KAAK,MAAM,QAAQ,KAAK,QAAQ,OAAO,CAAC,CAGtD;AAAA,MACT,gBAAgB,KAAK,QAAQ,gBAAgB,cAAc;AAAA,MAC3D;AAAA,IACF;AAAA,EACF;AAAA,EAEA,cAAc;AACL,WAAA;AAAA,MACL,kBACE,CAAC,eACD,CAAC,EAAE,IAAI,UAAU,eAAe;AAC9B,YAAI,CAAC,KAAK,QAAQ,OAAO,SAAS,WAAW,KAAK;AACzC,iBAAA;AAGH,cAAA,EAAE,cAAc,IAChB,EAAE,MAAM,GAAA,IAAO;AAErB,kBAAG,IAAI,aAAa,MAAM,IAAI,CAAC,MAAM,QAAQ;AAC3C,UAAI,KAAK,WAAW,QAAQ,OAAO,MAAM,MAAM,KAAK,YAE7C,KAAA,QAAQ,QAAQ,CAAC,YAAY;AAExB,oBAAA,MAAM,QAAQ,CAAC,SAAS;AAE9B,cACE,KAAK,KAAK,SAAS,eACnB,KAAK,MAAM,YACX,KAAK,MAAM,aAAgB,SAG3B,KAAK,GAAG,WAAW,KAAK,MAAM,KAAK,UAAU,KAAK,IAAI;AAAA,YACxD,CACD;AAAA,UAAA,CACF;AAAA,QACH,CACD,GAEG,YACF,SAAS,EAAE,GAEN,SAAS,WAAW,EAAE,OAAO,WAAW,OAAO;AAAA,MAAA;AAAA,IAE5D;AAAA,EAAA;AAEJ,CAAC;"}