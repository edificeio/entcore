import { CacheService } from "../cache/Service";
import { ConfService } from "../configure/Service";
import { DirectoryService } from "../directory/Service";
import { HttpService } from "../transport/Service";
import { RightService } from "../rights/Service";
import { SessionService } from "../session/Service";
import { ShareService } from "../share/Service";
import { WorkspaceService } from "../workspace/Service";
import { IdiomService } from "../idiom/Service";
import { AnalyticsService } from "../analytics/Service";
import { IAudienceService } from "../audience/interface";
import { VideoService } from "../video/Service";
import { App, ResourceType } from "../globals";
import { IBehaviourService, IResourceService, IWebResourceService } from "../resources/interface";
import { EmbedderService } from "../embedder/Service";
import { INotifyFramework } from "../notify/interfaces";
import { DataService } from "../data/Service";
import { IDataService } from "../data/interface";
export interface IOdeServices {
    analytics(): AnalyticsService;
    audience(application: App, resourceType: ResourceType): IAudienceService;
    cache(): CacheService;
    conf(): ConfService;
    data(): IDataService;
    directory(): DirectoryService;
    http(): HttpService;
    idiom(): IdiomService;
    notify(): INotifyFramework;
    resource(application: App, resourceType?: ResourceType): IResourceService & IWebResourceService;
    behaviour(application: App, resourceType: ResourceType): IBehaviourService;
    rights(): RightService;
    session(): SessionService;
    share(): ShareService;
    video(): VideoService;
    workspace(): WorkspaceService;
    embedder(): EmbedderService;
}
export declare class OdeServices implements IOdeServices {
    private _analytics;
    private _cache;
    private _conf;
    private _data;
    private _directory;
    private _http;
    private _idiom;
    private _notify;
    private _rights;
    private _session;
    private _share;
    private _video;
    private _workspace;
    private _embedder;
    constructor();
    initialize(): OdeServices;
    analytics(): AnalyticsService;
    audience(application: App, resourceType: ResourceType): IAudienceService;
    cache(): CacheService;
    conf(): ConfService;
    data(): DataService;
    directory(): DirectoryService;
    http(): HttpService;
    idiom(): IdiomService;
    notify(): INotifyFramework;
    resource(application: App, resourceType?: ResourceType): IResourceService & IWebResourceService;
    behaviour(application: App, resourceType: ResourceType): IBehaviourService;
    rights(): RightService;
    session(): SessionService;
    share(): ShareService;
    video(): VideoService;
    workspace(): WorkspaceService;
    embedder(): EmbedderService;
}
