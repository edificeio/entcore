{"version":3,"file":"audio.js","sources":["../../src/audio/audio.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core';\n\nexport interface AudioOptions {\n  url: string;\n  HTMLAttributes: Record<string, any>;\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    audio: {\n      /**\n       * Set a audio node\n       * @param options.updateSelection set to true will select the newly inserted content\n       */\n      setAudio: (\n        id: string,\n        src: string,\n        options?: { updateSelection: boolean },\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const Audio = Node.create({\n  name: 'audio',\n  group: 'inline',\n\n  inline: true,\n  selectable: true,\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n        parseHTML: (el: any) => (el as HTMLSpanElement).getAttribute('src'),\n        renderHTML: (attrs: any) => ({ src: attrs.src }),\n      },\n      documentId: {\n        default: '',\n        renderHTML: (attributes: any) => {\n          return { 'data-document-id': attributes.documentId };\n        },\n        parseHTML: (element: any) => element.getAttribute('data-document-id'),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'div.audio-wrapper>audio,audio',\n        getAttrs: (el: any) => ({\n          src: (el as HTMLAudioElement).getAttribute('src'),\n        }),\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      'div',\n      { class: 'audio-wrapper' },\n      ['audio', mergeAttributes(HTMLAttributes)],\n    ];\n  },\n\n  addCommands() {\n    return {\n      setAudio:\n        (id, src, options) =>\n        ({ commands, state }) => {\n          return commands.insertContentAt(\n            state.selection,\n            `<audio \n              src=\"${src}\" \n              controls preload=\"none\"\n              data-document-id=\"${id}\"></audio>`,\n            options,\n          );\n        },\n    };\n  },\n});\n"],"names":[],"mappings":";AAuBa,MAAA,QAAQ,KAAK,OAAO;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EAEP,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EAEX,gBAAgB;AACP,WAAA;AAAA,MACL,KAAK;AAAA,QACH,SAAS;AAAA,QACT,WAAW,CAAC,OAAa,GAAuB,aAAa,KAAK;AAAA,QAClE,YAAY,CAAC,WAAgB,EAAE,KAAK,MAAM,IAAI;AAAA,MAChD;AAAA,MACA,YAAY;AAAA,QACV,SAAS;AAAA,QACT,YAAY,CAAC,gBACJ,EAAE,oBAAoB,WAAW,WAAW;AAAA,QAErD,WAAW,CAAC,YAAiB,QAAQ,aAAa,kBAAkB;AAAA,MAAA;AAAA,IAExE;AAAA,EACF;AAAA,EAEA,YAAY;AACH,WAAA;AAAA,MACL;AAAA,QACE,KAAK;AAAA,QACL,UAAU,CAAC,QAAa;AAAA,UACtB,KAAM,GAAwB,aAAa,KAAK;AAAA,QAClD;AAAA,MAAA;AAAA,IAEJ;AAAA,EACF;AAAA,EAEA,WAAW,EAAE,kBAAkB;AACtB,WAAA;AAAA,MACL;AAAA,MACA,EAAE,OAAO,gBAAgB;AAAA,MACzB,CAAC,SAAS,gBAAgB,cAAc,CAAC;AAAA,IAC3C;AAAA,EACF;AAAA,EAEA,cAAc;AACL,WAAA;AAAA,MACL,UACE,CAAC,IAAI,KAAK,YACV,CAAC,EAAE,UAAU,YACJ,SAAS;AAAA,QACd,MAAM;AAAA,QACN;AAAA,qBACS,GAAG;AAAA;AAAA,kCAEU,EAAE;AAAA,QACxB;AAAA,MACF;AAAA,IAEN;AAAA,EAAA;AAEJ,CAAC;"}