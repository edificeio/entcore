import { jsx, jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import clsx from "clsx";
import { useTranslation } from "react-i18next";
import SvgIconDeleteColor from "../../modules/icons/components/IconDeleteColor.js";
import SvgIconInfoCircle from "../../modules/icons/components/IconInfoCircle.js";
import { DefaultPalette, AccessiblePalette } from "./ColorPalette.js";
import ColorPickerItem from "./ColorPickerItem.js";
import Tooltip from "../Tooltip/Tooltip.js";
const ColorPicker = /* @__PURE__ */ forwardRef(({
  palettes = [DefaultPalette, AccessiblePalette],
  model = "#4A4A4A",
  onSuccess,
  ...restProps
}, ref) => {
  const {
    t
  } = useTranslation(), handleClick = (item) => {
    item && (onSuccess == null || onSuccess(item));
  };
  return /* @__PURE__ */ jsx("div", { ref, ...restProps, children: palettes.map((palette, paletteIdx) => /* @__PURE__ */ jsxs("div", { className: clsx("color-picker mx-8", palette.className), children: [
    /* @__PURE__ */ jsxs("div", { className: "color-picker-label small mt-4 mb-8", children: [
      t(palette.label),
      palette.tooltip && /* @__PURE__ */ jsx(Tooltip, { message: "", placement: "auto", ...palette.tooltip, children: /* @__PURE__ */ jsx(SvgIconInfoCircle, { width: 18, height: 18, className: "mx-4 position-relative", style: {
        top: "4px"
      } }) })
    ] }),
    // Show/hide the reset option
    palette.reset && /* @__PURE__ */ jsxs("button", { type: "button", className: "color-picker-reset small my-8 gap-4", onClick: () => handleClick(palette.reset), children: [
      /* @__PURE__ */ jsx(SvgIconDeleteColor, { width: 20, height: 20 }),
      palette.reset.description
    ] }),
    /* @__PURE__ */ jsx("div", { className: "color-picker-palette d-flex gap-2 justify-content-between", children: palette.colors.map((hues, hueIndex) => /* @__PURE__ */ jsx("div", { className: "color-picker-hue d-flex gap-2 justify-content-between flex-column ", children: hues.map((color) => /* @__PURE__ */ jsx("button", { type: "button", "aria-label": color.description, className: "color-picker-hue-color", onClick: () => handleClick(color), children: /* @__PURE__ */ jsx(ColorPickerItem, { ...restProps, model: color, selected: model === color.value }) }, color.value)) }, hueIndex)) })
  ] }, paletteIdx)) });
});
export {
  ColorPicker as default
};
