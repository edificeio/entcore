{"version":3,"file":"iframe.js","sources":["../../src/iframe/iframe.ts"],"sourcesContent":["import { Node } from '@tiptap/core';\n\nexport interface IframeOptions {\n  allowFullscreen: boolean;\n  HTMLAttributes: {\n    [key: string]: any;\n  };\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    iframe: {\n      /**\n       * Add an iframe\n       */\n      setIframe: (options: { src: string }) => ReturnType;\n    };\n  }\n}\n\nexport const Iframe = Node.create<IframeOptions>({\n  name: 'iframe',\n  group: 'block',\n  atom: true,\n  draggable: true,\n\n  addOptions() {\n    return {\n      allowFullscreen: true,\n      HTMLAttributes: {\n        class: 'iframe-wrapper',\n      },\n    };\n  },\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      frameborder: {\n        default: 0,\n      },\n      allowfullscreen: {\n        default: this.options.allowFullscreen,\n        parseHTML: () => this.options.allowFullscreen,\n      },\n      width: {\n        renderHTML: (attributes) => {\n          return attributes.width\n            ? {\n                width:\n                  attributes.width === '100%'\n                    ? '100%'\n                    : parseInt(attributes.width),\n              }\n            : {};\n        },\n        parseHTML: (element) => element.getAttribute('width'),\n      },\n      height: {\n        renderHTML: (attributes) => {\n          return attributes.height\n            ? {\n                height: parseInt(attributes.height),\n              }\n            : {};\n        },\n        parseHTML: (element) => element.getAttribute('height'),\n      },\n      style: {\n        renderHTML: (attributes) => {\n          return attributes.style\n            ? {\n                style: attributes.style,\n              }\n            : {};\n        },\n        parseHTML: (element) => element.getAttribute('style'),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'iframe',\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['div', this.options.HTMLAttributes, ['iframe', HTMLAttributes]];\n  },\n\n  addCommands() {\n    return {\n      setIframe:\n        (options: { src: string }) =>\n        ({ tr, dispatch }) => {\n          const { selection } = tr;\n          const node = this.type.create(options);\n\n          if (dispatch) {\n            tr.replaceRangeWith(selection.from, selection.to, node);\n          }\n\n          return true;\n        },\n    };\n  },\n});\n"],"names":[],"mappings":";AAoBa,MAAA,SAAS,KAAK,OAAsB;AAAA,EAC/C,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,WAAW;AAAA,EAEX,aAAa;AACJ,WAAA;AAAA,MACL,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,QACd,OAAO;AAAA,MAAA;AAAA,IAEX;AAAA,EACF;AAAA,EAEA,gBAAgB;AACP,WAAA;AAAA,MACL,KAAK;AAAA,QACH,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,MACA,iBAAiB;AAAA,QACf,SAAS,KAAK,QAAQ;AAAA,QACtB,WAAW,MAAM,KAAK,QAAQ;AAAA,MAChC;AAAA,MACA,OAAO;AAAA,QACL,YAAY,CAAC,eACJ,WAAW,QACd;AAAA,UACE,OACE,WAAW,UAAU,SACjB,SACA,SAAS,WAAW,KAAK;AAAA,QAAA,IAEjC,CAAC;AAAA,QAEP,WAAW,CAAC,YAAY,QAAQ,aAAa,OAAO;AAAA,MACtD;AAAA,MACA,QAAQ;AAAA,QACN,YAAY,CAAC,eACJ,WAAW,SACd;AAAA,UACE,QAAQ,SAAS,WAAW,MAAM;AAAA,QAAA,IAEpC,CAAC;AAAA,QAEP,WAAW,CAAC,YAAY,QAAQ,aAAa,QAAQ;AAAA,MACvD;AAAA,MACA,OAAO;AAAA,QACL,YAAY,CAAC,eACJ,WAAW,QACd;AAAA,UACE,OAAO,WAAW;AAAA,QAAA,IAEpB,CAAC;AAAA,QAEP,WAAW,CAAC,YAAY,QAAQ,aAAa,OAAO;AAAA,MAAA;AAAA,IAExD;AAAA,EACF;AAAA,EAEA,YAAY;AACH,WAAA;AAAA,MACL;AAAA,QACE,KAAK;AAAA,MAAA;AAAA,IAET;AAAA,EACF;AAAA,EAEA,WAAW,EAAE,kBAAkB;AACtB,WAAA,CAAC,OAAO,KAAK,QAAQ,gBAAgB,CAAC,UAAU,cAAc,CAAC;AAAA,EACxE;AAAA,EAEA,cAAc;AACL,WAAA;AAAA,MACL,WACE,CAAC,YACD,CAAC,EAAE,IAAI,eAAe;AACd,cAAA,EAAE,cAAc,IAChB,OAAO,KAAK,KAAK,OAAO,OAAO;AAErC,eAAI,YACF,GAAG,iBAAiB,UAAU,MAAM,UAAU,IAAI,IAAI,GAGjD;AAAA,MAAA;AAAA,IAEb;AAAA,EAAA;AAEJ,CAAC;"}