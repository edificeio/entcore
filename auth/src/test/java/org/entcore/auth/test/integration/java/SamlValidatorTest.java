///*
// * Copyright © WebServices pour l'Éducation, 2015
// *
// * This file is part of ENT Core. ENT Core is a versatile ENT engine based on the JVM.
// *
// * This program is free software; you can redistribute it and/or modify
// * it under the terms of the GNU Affero General Public License as
// * published by the Free Software Foundation (version 3 of the License).
// *
// * For the sake of explanation, any module that communicate over native
// * Web protocols, such as HTTP, with ENT Core is outside the scope of this
// * license and could be license under its own terms. This is merely considered
// * normal use of ENT Core, and does not fall under the heading of "covered work".
// *
// * This program is distributed in the hope that it will be useful,
// * but WITHOUT ANY WARRANTY; without even the implied warranty of
// * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// */
//
//package org.entcore.auth.test.integration.java;
//
//import org.entcore.auth.security.SamlValidator;
//import org.junit.Test;
//import io.vertx.core.AsyncResult;
//import io.vertx.core.Handler<AsyncResult>;
//import io.vertx.core.Handler;
//import io.vertx.core.eventbus.EventBus;
//import io.vertx.core.eventbus.Message;
//import io.vertx.core.json.JsonObject;
//import io.vertx.core.json.impl.Base64;
//import io.vertx.testtools.TestVerticle;
//
//import java.io.ByteArrayOutputStream;
//import java.io.IOException;
//import java.io.UnsupportedEncodingException;
//import java.net.URLDecoder;
//import java.util.zip.DataFormatException;
//import java.util.zip.Inflater;
//
//import static io.vertx.testtools.VertxAssert.*;
//
//public class SamlValidatorTest extends TestVerticle {
//
//	private EventBus eb;
//
//	private static final String samlResponse = "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIENvbnNlbnQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjb25zZW50OnVuc3BlY2lmaWVkIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9yZWNldHRlLW9uZy5lbnRjb3JlLm9yZy9hdXRoL3NhbWwvYWNzIiBJRD0iZjRiODk4ZDk4NTBjYmQxODQ1ZWQ1OGUzYThmYjIxYjYiIElzc3VlSW5zdGFudD0iMjAxNS0wNi0wNFQxMzoyNjo0OFoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPnVybjpmaTphYy1wb2l0aWVyczplbnQ6MS4wPC9zYW1sOklzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiPjwvc2FtbHA6U3RhdHVzQ29kZT48L3NhbWxwOlN0YXR1cz48c2FtbDpBc3NlcnRpb24gSUQ9ImU0MzVjN2U5YTIzOGY1ODBjZmQ0NzNiNzQyYjE1NWVjIiBJc3N1ZUluc3RhbnQ9IjIwMTUtMDYtMDRUMTM6MjY6NDhaIiBWZXJzaW9uPSIyLjAiPjxzYW1sOklzc3Vlcj51cm46Zmk6YWMtcG9pdGllcnM6ZW50OjEuMDwvc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+PC9kczpDYW5vbmljYWxpemF0aW9uTWV0aG9kPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIj48L2RzOlNpZ25hdHVyZU1ldGhvZD4KPGRzOlJlZmVyZW5jZSBVUkk9IiNlNDM1YzdlOWEyMzhmNTgwY2ZkNDczYjc0MmIxNTVlYyI+CjxkczpUcmFuc2Zvcm1zPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiPjwvZHM6VHJhbnNmb3JtPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiPjwvZHM6RGlnZXN0TWV0aG9kPgo8ZHM6RGlnZXN0VmFsdWU+cm9EaFBEUjZWNXYyUDZGbkQxNVhjQ2oyZEpZPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KUUZmVTlkcVlYVEtoNDA0SlFRSVl0aW80ay85ZDREQ2duQnkxbE5PMTZtU2xYakZiZG9jRlRabzVjU0cvZGtNYXdJWmR5TDdYbU9NawpuNU9PZTU0L1FUTmlFQU9IYlRZWmFBUGNybE8rdzNqRStMcDlqQTRjb1FOZkVXRDFaUFlLMVE4cTlpZDA0OVhmSUdJSjJMVW1uSW5xCk1CRG5rVlZ5ZEtSUzBBN0djdTltN2NmeUVIRTdVK1F2R2RnUzNiejhQdUJxNGNadFVva1Nsa0p2L1JmRHJldSt0YUNHYkVJc2lLTmcKRHVIaXBJK2l2UjMraEZnRHdLK2VVSzAvay9HY2JqdTU2bU1TWk9UbU01ZEpGYk5TLytmZEVWVGhXbVJFWkp2MHRMUkFWMjk5VEMzQQp0NDlMYU00MWZ1QmQvLzdKV2k0b0dmU2FqL3c4Wk9zY2trRjB4dz09CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjwvZHM6U2lnbmF0dXJlPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6dHJhbnNpZW50IiBOYW1lUXVhbGlmaWVyPSJ1cm46Zmk6YWMtcG9pdGllcnM6ZW50OjEuMCIgU1BOYW1lUXVhbGlmaWVyPSJ1cm46Zmk6b25nOnJlY2V0dGUtb25nOjEuMCI+ZDg1NDJkZTA2MzJhYzVmY2Y0YjVkMjFkN2I3M2Y0ZTE8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBOb3RPbk9yQWZ0ZXI9IjIwMTUtMDYtMDRUMTM6MzY6NDhaIiBSZWNpcGllbnQ9Imh0dHBzOi8vcmVjZXR0ZS1vbmcuZW50Y29yZS5vcmcvYXV0aC9zYW1sL2FjcyI+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb25EYXRhPjwvc2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDpTdWJqZWN0PjxzYW1sOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE1LTA2LTA0VDEzOjIxOjQ4WiIgTm90T25PckFmdGVyPSIyMDE1LTA2LTA0VDEzOjM2OjQ4WiI+PHNhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDpBdWRpZW5jZT51cm46Zmk6b25nOnJlY2V0dGUtb25nOjEuMDwvc2FtbDpBdWRpZW5jZT48L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWw6Q29uZGl0aW9ucz48c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTUtMDYtMDRUMTM6MjY6NDhaIiBTZXNzaW9uSW5kZXg9ImU0MzVjN2U5YTIzOGY1ODBjZmQ0NzNiNzQyYjE1NWVjIj48c2FtbDpTdWJqZWN0TG9jYWxpdHkgQWRkcmVzcz0iNzcuMTQ2LjE1MS4xNjgiIEROU05hbWU9IjE5Mi4xNjguMTMuNjciPjwvc2FtbDpTdWJqZWN0TG9jYWxpdHk+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0PC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudCB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPjxzYW1sOkF0dHJpYnV0ZSBGcmllbmRseU5hbWU9ImF0dHJpYnV0IHJlcXVpczogY3RlbWFpbCIgTmFtZT0iY3RlbWFpbCIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWU+dHByb2YubXRAYWMtcG9pdGllcnMuZnI8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDpBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4=";
//
//	private static final String modifiedResponse = "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIENvbnNlbnQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjb25zZW50OnVuc3BlY2lmaWVkIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9yZWNldHRlLW9uZy5lbnRjb3JlLm9yZy9hdXRoL3NhbWwvYWNzIiBJRD0iZjRiODk4ZDk4NTBjYmQxODQ1ZWQ1OGUzYThmYjIxYjYiIElzc3VlSW5zdGFudD0iMjAxNS0wNi0wNFQxMzoyNjo0OFoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPnVybjpmaTphYy1wb2l0aWVyczplbnQ6MS4wPC9zYW1sOklzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiPjwvc2FtbHA6U3RhdHVzQ29kZT48L3NhbWxwOlN0YXR1cz48c2FtbDpBc3NlcnRpb24gSUQ9ImU0MzVjN2U5YTIzOGY1ODBjZmQ0NzNiNzQyYjE1NWVjIiBJc3N1ZUluc3RhbnQ9IjIwMTUtMDYtMDRUMTM6MjY6NDhaIiBWZXJzaW9uPSIyLjAiPjxzYW1sOklzc3Vlcj51cm46Zmk6YWMtcG9pdGllcnM6ZW50OjEuMDwvc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+DQo8ZHM6U2lnbmVkSW5mbz4NCjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48L2RzOkNhbm9uaWNhbGl6YXRpb25NZXRob2Q+DQo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIj48L2RzOlNpZ25hdHVyZU1ldGhvZD4NCjxkczpSZWZlcmVuY2UgVVJJPSIjZTQzNWM3ZTlhMjM4ZjU4MGNmZDQ3M2I3NDJiMTU1ZWMiPg0KPGRzOlRyYW5zZm9ybXM+DQo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiPjwvZHM6VHJhbnNmb3JtPg0KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+PC9kczpUcmFuc2Zvcm0+DQo8L2RzOlRyYW5zZm9ybXM+DQo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiPjwvZHM6RGlnZXN0TWV0aG9kPg0KPGRzOkRpZ2VzdFZhbHVlPnJvRGhQRFI2VjV2MlA2Rm5EMTVYY0NqMmRKWT08L2RzOkRpZ2VzdFZhbHVlPg0KPC9kczpSZWZlcmVuY2U+DQo8L2RzOlNpZ25lZEluZm8+DQo8ZHM6U2lnbmF0dXJlVmFsdWU+DQpRRmZVOWRxWVhUS2g0MDRKUVFJWXRpbzRrLzlkNERDZ25CeTFsTk8xNm1TbFhqRmJkb2NGVFpvNWNTRy9ka01hd0laZHlMN1htT01rDQpuNU9PZTU0L1FUTmlFQU9IYlRZWmFBUGNybE8rdzNqRStMcDlqQTRjb1FOZkVXRDFaUFlLMVE4cTlpZDA0OVhmSUdJSjJMVW1uSW5xDQpNQkRua1ZWeWRLUlMwQTdHY3U5bTdjZnlFSEU3VStRdkdkZ1MzYno4UHVCcTRjWnRVb2tTbGtKdi9SZkRyZXUrdGFDR2JFSXNpS05nDQpEdUhpcEkraXZSMytoRmdEd0srZVVLMC9rL0djYmp1NTZtTVNaT1RtTTVkSkZiTlMvK2ZkRVZUaFdtUkVaSnYwdExSQVYyOTlUQzNBDQp0NDlMYU00MWZ1QmQvLzdKV2k0b0dmU2FqL3c4Wk9zY2trRjB4dz09DQo8L2RzOlNpZ25hdHVyZVZhbHVlPg0KPC9kczpTaWduYXR1cmU+PHNhbWw6U3ViamVjdD48c2FtbDpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDp0cmFuc2llbnQiIE5hbWVRdWFsaWZpZXI9InVybjpmaTphYy1wb2l0aWVyczplbnQ6MS4wIiBTUE5hbWVRdWFsaWZpZXI9InVybjpmaTpvbmc6cmVjZXR0ZS1vbmc6MS4wIj5kODU0MmRlMDYzMmFjNWZjZjRiNWQyMWQ3YjczZjRlMTwvc2FtbDpOYW1lSUQ+PHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9uT3JBZnRlcj0iMjAxNS0wNi0wNFQxMzozNjo0OFoiIFJlY2lwaWVudD0iaHR0cHM6Ly9yZWNldHRlLW9uZy5lbnRjb3JlLm9yZy9hdXRoL3NhbWwvYWNzIj48L3NhbWw6U3ViamVjdENvbmZpcm1hdGlvbkRhdGE+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTUtMDYtMDRUMTM6MjE6NDhaIiBOb3RPbk9yQWZ0ZXI9IjIwMTUtMDYtMDRUMTM6MzY6NDhaIj48c2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sOkF1ZGllbmNlPnVybjpmaTpvbmc6cmVjZXR0ZS1vbmc6MS4wPC9zYW1sOkF1ZGllbmNlPjwvc2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDpDb25kaXRpb25zPjxzYW1sOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNS0wNi0wNFQxMzoyNjo0OFoiIFNlc3Npb25JbmRleD0iZTQzNWM3ZTlhMjM4ZjU4MGNmZDQ3M2I3NDJiMTU1ZWMiPjxzYW1sOlN1YmplY3RMb2NhbGl0eSBBZGRyZXNzPSI3Ny4xNDYuMTUxLjE2OCIgRE5TTmFtZT0iMTkyLjE2OC4xMy42NyI+PC9zYW1sOlN1YmplY3RMb2NhbGl0eT48c2FtbDpBdXRobkNvbnRleHQ+PHNhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY+PC9zYW1sOkF1dGhuQ29udGV4dD48L3NhbWw6QXV0aG5TdGF0ZW1lbnQ+PHNhbWw6QXR0cmlidXRlU3RhdGVtZW50IHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSI+PHNhbWw6QXR0cmlidXRlIEZyaWVuZGx5TmFtZT0iYXR0cmlidXQgcmVxdWlzOiBjdGVtYWlsIiBOYW1lPSJjdGVtYWlsIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZT50b3RvQGFjLXBvaXRpZXJzLmZyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+";
//
//	private static final String encryptedResponse = "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIENvbnNlbnQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjb25zZW50OnVuc3BlY2lmaWVkIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9yZWNldHRlLW9uZy5lbnRjb3JlLm9yZy9hdXRoL3NhbWwvYWNzIiBJRD0iYWNiMGZmN2E3YjIyZTFlODk4ZDdjNTkyZmRjOGY3ZmQiIElzc3VlSW5zdGFudD0iMjAxNS0xMC0xNlQxMzo1OTo1OVoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPnVybjpmaTphYy1wb2l0aWVyczplbnR0czoxLjA8L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjwvZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZD4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSI+PC9kczpTaWduYXR1cmVNZXRob2Q+CjxkczpSZWZlcmVuY2UgVVJJPSIjYWNiMGZmN2E3YjIyZTFlODk4ZDdjNTkyZmRjOGY3ZmQiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIj48L2RzOlRyYW5zZm9ybT4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+PC9kczpUcmFuc2Zvcm0+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIj48L2RzOkRpZ2VzdE1ldGhvZD4KPGRzOkRpZ2VzdFZhbHVlPkRpZStUbU40MFBYOE85enVPU1VoZS93d0E3RT08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWU+CkVSMUp4aGYrMHZDRjFPKzVSZWFuRmF5K2tqK0tCTlZDSW1yc2orL3gxaGlhSjR2cFdmNjJDWDFrTjJZajYzT1hMcXlXSTJyK1IzaXcKS2RmTkpPZUV4VkdGd2wzdnp5TTVzUmRmUjdoM3p2WEozQ0Uzb1B1ZjBYUUIrUzdXRTNsK3RyNmpJVHZGWGM2VzJjbVV5UXNicGg1TQpobUhtRXR2dC9QeWNNSWdxdXNtYXh2eGVDSzBPYkIyaFhKSG9sZGRxY0ZZZWRIZXBCVStyWjBodWVJQ0tlVU15SWR3aEplRkxVdXA5CnQzazNnUjJFbVAxZm1pc1ZuSnFjSTBLOEhHTzJvU1RUckd5N3UwR09KYTYvOHFpcTMrM3I2bEdVMitoSjFCdDg2SGNWdG9PelNkZzcKN3kxTnJHVVJPUmg4K09lSGJ4Sm5WTnNqc3hid01GeW5FdS9LY1E9PQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8L2RzOlNpZ25hdHVyZT48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiPjwvc2FtbHA6U3RhdHVzQ29kZT48L3NhbWxwOlN0YXR1cz48c2FtbDpFbmNyeXB0ZWRBc3NlcnRpb24+PHhlbmM6RW5jcnlwdGVkRGF0YSB4bWxuczp4ZW5jPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyMiIFR5cGU9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI0VsZW1lbnQiPjx4ZW5jOkVuY3J5cHRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyN0cmlwbGVkZXMtY2JjIj48L3hlbmM6RW5jcnlwdGlvbk1ldGhvZD48ZHM6S2V5SW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+Cjx4ZW5jOkVuY3J5cHRlZEtleSBSZWNpcGllbnQ9InVybjpmaTpvbmc6cmVjZXR0ZS1vbmc6MS4wIj48eGVuYzpFbmNyeXB0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjcnNhLTFfNSI+PC94ZW5jOkVuY3J5cHRpb25NZXRob2Q+PHhlbmM6Q2lwaGVyRGF0YT48eGVuYzpDaXBoZXJWYWx1ZT5Ra3EzU3U0OUlBZnZnRy9zdGNyYXY2QjRQVndzaDFvT1lsQ0lGa25ucmlCQVJmMVRVT0JqMFNKN25xR2xLWnFvaDdVQ2p1OGpIUHJPCkEwRzhqTjAwS204UkV2aktlRGloa3lKY3o3dFNiTlZKdGhQb3JmM1JvWlE3NlRzMU02QVNrc1g2MUF2S25Xd2pjYzk3dWFFNXF6VzYKRU5DSVh4RTE5Q1FoQ0syMk1pVT08L3hlbmM6Q2lwaGVyVmFsdWU+PC94ZW5jOkNpcGhlckRhdGE+PC94ZW5jOkVuY3J5cHRlZEtleT48L2RzOktleUluZm8+PHhlbmM6Q2lwaGVyRGF0YT48eGVuYzpDaXBoZXJWYWx1ZT4vdzZOZjZjKzRxS2dmZ1liaVlXVGVJbm9CZ0NZVzZDUlEvQldjZ0s0TVNCbEVhNFF2dElIRUNlcnFzR1lwcjdoUjV1b2tlOFpXQk5ZCmhna3FnSWkyLzB3dmVCdml4Y3NHNzJESHpQcjM3SDJwMzVmc3lhTlQxZVFEVnFkUXNEWXBEY3ZWOTlzak9DRWZBQXFub1lDNUxQSkwKeGNZblRPem9abnRPeXFrN1Z4ZC9EVFF2TG9lU3FMRXNaUDlSR3kzWWJCUzBDUy9aYngvVjM5ZldySjBRSytDNnF4dkFUUlFsTWdRMwpUaXdYQUdYZWNNQlMvS2VpWEpDQTJKdE5vOEFuMXVPMDJ3QXZHWTc1N3lnbGpKM1REYnBqZjBHKzRZTnFMRjk5dTdYVHZJMlJZWUFwClFPV055V0tpK1hKZnNVZUwremUxWWVURG5XVWxZN3UyZzlicTc0Qk42Qk1pT2ZnTFZwNVdvbWZObm9wUzA2OHVlNkltSU1vcFA4WFAKeHRydFJQOUMrWTRZVlNwSWhJa1ZMVWxDdHFKUFBDZzkzS0l6MDhnTTlpY1U4S2toYzBPL3BMK1hRQ0RxQ250NGJSWjZiYldINGl6dApKRjF1dUR6dWliVXI1bzV2RnlBcVp4SGlNYkhVZXliOE82UnAveVdNUm9NbGoxWWl1cGpZdmFRY2VaWGluNjhPSnZPSG0rYlJubHNsCjFxNDhWaHVIajcrSUoxR240MzFPUCt3V1IxQ2pVOHlWYkZqY2VoanRpOFlMTGxUZ3krWFdoQUhrQisxanBsVGd0S0VFZ3B4a2I1NUsKMzBGajJOWjdqM1JmRUo3cHg2YzAvSzYvWHkwWXZtK2lGVitrMlFsbVQ2UU0wZEgxNkJtckVQbmFQWWJndzF2eGtOa0hGTlJQZFpBdwo4d2c0MExUM2ZkeS9RVnVlWlhKdTJsZXpTdGozcE4renF1Y2t0Tk1UVzZER1M3YXBKQVVIdnZtVjdHWjVjMzBqemRNUlBaRUtaenN5CkhCZzluckozOW54Y201a2VLU3cxZnN6RzFoL1NqalJJcENwVlR2RWFyZUFZYTdJTG1QeFFnNnlkclZhaGlVVjlFQXFlYnZ5NW1TTmYKU3ozcEtLUzZkK0liSjFicVNJZjAwc1p1bHdqb1JFREE3MVpIU29lbzk0ZkRqRGhPVitSUDByL05ycUwyL2R4emo0T0ljTFZ5WXJvZgpLSjM3WE16eUNjditudUVPTjdCQ1FNemkvaFNjK0FJTzMvMWdodzNERHpYRElJZ1R2VDNIeFUvaXRJZnQ1bzZKbmhSNS8xOGdmUlJyCm83a3lNYnY5TGFjdG40Y3RKVTBzbVU1a3BMN0d4QTZkdjlhMm52WXhUbEM1NWZaUWFESURYUmlHcEFUaUZUNGhYc1RWeGl5YjdJVWEKdjhoeldzN3R2a0cwVXNjcmh1NS9MM1VnZktkMVdIaFRWRFF2Nlc0VTZ5MXZzNHRBSFZ5VzlnSG4yZUozeVdIVkxXMW43OFBkazViRwpxc2hLY1k2WGVadUszSGhSdXoyR09nQUJPcWlnd29FdlFlYy9qRGZtUUNNemwzSndEQ2VuOGxtdjdNZzMyMDZHWEtIRllOeFpQR0dECm5GQ2RvMGsxV1p5ZEQzL1JTaldxU2NNejN4cTNLS2NaZVFKeC95azRRR3BhWUtZZWFNYldwOEhhTmVDbUx2dXpyVHVFdTNxSFoxNFUKaFdKRG9PZE0xRG9BWkhTYWE5bUszVm5wQndnOGNTeE5KRFVicXVGU2R2VW5VVjNDMmh5Y1NtbUpSZnBHTHBEQWRSdXlMYktOenBvMgpyVHN5VysyRG5Jak9WUVlKdk5uNWRIaDZVS0JyemdkeVJJdE1sTzA0b1NHcmJzVzMvZHBuaUhadmRZWTBGZVp3Z3dpZHZ1YnpHRUh5CjFrY0FKTXcxVTF2a1BKZXBFVGc1Z25DcWpGaFpoUzc4Ymd2eFpPMjdRRnp5K1NqZWw4T3pZMTg5emdyS1BRSnNEd2pDWVlYdTRPTXoKUnpwTi90dEVIZnhhMGdxQk9qY3VjWCttRTJzSjFTbWtUc2NOa3lCSU1YZ1NzTHB1OG5MWW5BUDMzQnZIN3V0VU5tdWZ4bzNva0kwVAo1UmpWcytmYmdwYURmV0c4cFZadGpsQkg2ZHYxUHlYVjVJOHZBcEFUQjN6WHlHZC8vb3RHTis0TTFtcktHeERaZ2FaaFI0NHgxT3F1CkM4dURlMlNRaVJzNzEwSUVFZkNydlpmYVpBc3dwajdkUEE1NzBIOVpLQytIQ1o1cHBKcjd2U3N0TllGOFc2R25RTXM2aGdkWExCME8KVkpHU3F3ZmFQY1NrVWZaOEwzWjc2aElhZUNxOW5NRW9RUCttd1FZSGdXVURueFFGUXVPenpqVFNvOGJqMm1tOGxRMU9oVDhOQkQxbwpLODg0cmo5STNQMkVpay9nL2lRNkNGRENkZUFUTG9zN1NMZ09udUJTL3FYRXU2cCt5ZXFLWFhqUExBUXdndXc2Tm44bkJGRGhWTk03CjlXQStzZGZRMVNCb1Uwb1B4UlZLVTFhbkpaVXFFZTR4bTlaOHZxYStxOFdwV3NMT1dtRFVuUk1EYzIzdW95bHhRNDFWTzNiVkFjWmwKZ09oc3dwVkN5UjQrS3dDR21CNnljOHZSODBNL25RL1Y4eU1mc21jaEtWUDR1aU9jSTVUaDViZkF2TkRJSjdaSTR4ZzEzZ3B3ZDh3TgpuSlh1SUl0TWt0YmIvMWxUVitlUGQxby9tazE2c28wY2tyZ3h0SDhWTVhoOWpkdEFzc2c5WGZMWG40Y0hLUGJjcTMvWVRRM0lWSGlVCmF0bjFwQU9lQWZzR25nNFdpanBBenp4dXBqWFBqL1NsVlN6d1l6cmc3Ymg3QVFDbDkyb2hLR3RpY1V6YVErQlpwVW1sVDJPY0VaL0IKMUN2MitDbVhCSGhNUGs1RWJOVDV5V0pTMnZzMXJzOXBtWkh4ZzdMRVc1UVRKQ3lXcEVwK1dvQVh4TkJrYkVKNUd0Qm9DODdDK0VCNApNUlE1NEt0eEhUMDNvMGRwUmx2WXBRNXJZVTV1K0RLejBGcVhsNHcra28wNXVPTGJ3RVc4MVAwY2x6MHFZQ0lERWxCZ2QrSVdWbDRTClBjcWRSbmlGNW5GWHpaNUU1NldOYzBHQTNuQVREZG1uR0YzTXhpdFhLeHVQN3djdVU4TDg1cUdDK2RJYVNIbEYvV3BFR3NTbHUzTHoKNHZ0M2FBaDZFZE5adi9MT2NFeTBWNkowVVo2MmpzWXZhVWFJZlhLZzhEbDBDTlgzbndIUGhXOFhucjJVOTQzamtQd0JjUFVrTTdYQwpRSFBXcDZib2xWYW9XbWl6MkFVRFBndS8zd2NyMmRUZWNyajQ3cm5HU2dYNnkycnZGTHJVRWNJS29UbU5mSXhlMC8vYTlxMjM0a05BCkFzSW1WaE9uM1JHNzBvS0oycURvdThjMmF3dnFQZjBJL2FBYzBuSjRUaWExWU9NamZGWkwyY3FyQzJSdTlad3EvUUc1R3phVHc4THEKM3RlMGtQSEYyck85ZmM3TU50OERjZTlQOVY1blNBWXdZYXFKNEpkT0lpYXNIS0RHRjd1Rk5ORmZNVWhRRG5sRkdpdExmU04rRGpHbwppWlROS2w0RkdTUE5YWTVsNnhYaWJWZDN1QUZwN2xUSTI0dVdNT0RYbGZySk44ZU1yWHF2V0tnanE1VlFpSjJ5L0dMamdWWWRhenhRCjBlT0F4Y2xPSHFwY0NjUjZ3N2VEeHBWWjhOcFRMT250VjJGdTVkWVJJTGowUW1NM2ZOeUNtZmUrb0wxL0IwM2VrWWJtTXFzSTJBTVcKWHZUak5tNjlwcGpnSDJsa1FWcU1TYzZ6YkxDTHF5Y1VuYmZIL25ISEhNOTVlT296UEMvNktFNWl6cGxNbkpQeUI1UkVtTWEzNWxGUwpjN2xrUTZTNlhiakNKQTBCeGZRcG9jVFBlUmNaWTBMRC80RFBhbm9mUkpuL0VmNUhxeDVRNTQ3VFBRMFR5L1Fpc0xoZmtOcTFpdFA3CmdzRHlYT2l5bGVvclRIYWpaZnR2UmRFUWRacGxZRjkvcnpzNUNBZWRmSTJhNjVUekRuSk1va2VlNXd6R1RrVGJURFJKaXZQcmNvSGoKWm4wR0JMbXhQYnA3R1pmUk42eXVSNUREOVZpWEUwRmZQcjNXNkFJQi9KNmpQNDhYZ0ZDc3pabENsRFpjeUtIVlN5YTBGakZGM3IzNgo0QU9acUFVUW9QWml3Mk5QVU1CSzhHNnl3ZnN5Snk5N085Vkk2V05XbExGUDZEVStTb1kvamsxUU05V3FIVU40dndxT0Npd2luTzdmCk9Tbnc3OGpCbHhGblpteTB3cGlrZ0R1dWZoNVZVcWxtMWdUR3huUjc2c2MyU2tteWx4bVB4MnJxaTIveWxndnBWQ2tUQXhPT0prRloKYkh0cW1aN0Q5cUU2Q0QwZkZTazRTaUl4Zkp4OFpyRUdxUmpzL1YxMVlyUGplc3c2Y2V4TVgvb2ViaDNmSXlGazlGQTQ0TkZZYmdGNgoxbGhYanh5alBPRHBJN0FsRlNQc1dOT3N2TG5PUEVsZjJMeDRoN1J1OEh2WnpsZUhEZkRLY1VyaDA3cUpiVWFWSGo5WUs2cG0vdGt0CkxWQXBYcmIrSzVESW1mS0JEZFJNOXYybTVBd3RUaGNMQWxZcFhXYWs4QTE4SEdDQ005T1BsU3NLYXFxQmVYb2MvY2J3b3k1Y2dBMFAKaFhVTEdOUzhwYk1YWXZPOG85RHVpdEpWV2Q5QUtaeDJ0b05YN0htYlRTdVA4Q0FKVHBmSVR2NExZMnFCamZVbEI2TzdxSlRsMlU5SgpYZnR1TWZ1Y2JyZVNnQ090LzJDdUNCMUdSWE1SdTdJUzdickRSYjlBYXFXRWlyQUxLUE1xQ0tQcGE4eTM4c21ZSHk3T1lDeTJPZit3ClVpY0tiWjBvRU9idHRPN1hSTlFTTGQxZHVRblJtRHdJNUhVVHRpWEhJS011Zi83TytBUi9NRTArNDBDalJDVURCbzI3SU9GSmNZdTAKUHNJazJEUk1wdXFLK3BPMGhiWGpYb1pHdkdlamNCalBpZWVVUVl5YnBFSVRKSDBGR0dhNzNiQmhZWWhlUjBKdko4YU1qUktiQmcvcwpka1NZbTZEOWN1RCtyZjNicTUrcVZZY3dIc016Y0IxZ2p4ZSs4U2UranZUakZ4dnVvbi9ObWhTWll3Y0liVS9PMWNVd0lOTWFOOHZTClZJWnVLQ2Y0NzQvelJxYTBCY3h4OFZtbHUxTE5VSUNxRkYxTTVyUGVZTmoreDZpMm16c3VZd0pJY2VkWW9UMCtDWDFIZkp0MEZBZTUKVTduZm5IWk93Q1daZk5iM1hZQXJxakZ1YU53MUpIdFR1RWRtTjNnYk1LMGZ1MGhhdlhmbHlpTVMzMUExRmhHOXFsVlV2K1Y4ajZKQgpTWVk5T20va0dXQTI5enBzUWlscTRxYlJmdk1lZEJOT0RsL3JlTE1yRDFrYXo5UFN2REdoaThaTFZaOHByc3E0T2ExY3hOZW5xRnU0CklOanJrK1JFTVVuQnJ3N3ViUUtOcUhORm1IaWIwUTdhdlZQTlBlSVBkbnY4dVlIV1JReElRM2JFSVQvcktGbmx2YWxaUmNqOW9uS2UKem12dkpsMllrOFVIWHJCZ2RQMjBWa1UyeldzMDU5TWVBUGpUNXQxejhLYXoyMXdFVFlDQnNoYU0zVVY1UWxRZ0JDanRCeHlKYzhXdQpkTG1ZaGtraEUxenpVR1BPb25ua2E1dG96TTdnWHFiTkR1MnNiZVpYZjBaa1ROc0hzOFZTWW1nTnMwTFZOUEZEc3lycm9XNFhPYzlrCmhCZHJOWDArMjZFTGJkTVRDb0wwK25ucE9VSjRSMEc2YXhyRkFWN3JNQXBJL0Z3RC9aS0VxZnBRWnE1OEJJRUFpYi96RlZ1WHpGTjgKbHh2TEkzajdBamdjUDhLWjUvSWVnRng5MDBCTUJiQXRpZ0ZMV0N4MlNucURnOFBDbDUydUpoYm50d0JZcHZXR3FpNytLaXRlam9MZApMY01QVWp4a1RhbDdWUXZ3TlhsN0hlTE5XQUtlcVRLQ3c2QVFzVmZOQ1U3b0pEK1c3TVg4NGRQdlpiMkk2UkpoS2RwdkR1RjRCaTJ6Cmx4clVzUlZHTWJLMWlOdDdOWEdqd3UvRUJGQ1IrT0hpTUIyN0I0aEExY2Z0MmtqYlcvdmpOZlg4RkdKSThpa3FDRTBPbzlxVnNOQ0QKazNXaTB6TlRVTjN6RnMvSk95Y2pWbTlodk5BZDFCbjZCc2p5azNoMzFmVFR0M2U5NU1waWE2SFBNVnpNT1YxVllEM0xKYmd4dFJZRwptZFk1Ukh1WWoyNGFST0kzN0VmRWM5UDJGOHpoUmx1d1JkdktXL2JHK3E3VFNOTERuWlNnb1VMcmhsQzVpSEswMHJ4WDRIRGdVcVJTCjVobklkVXdzSk9vV2FrNXN0bzhqV0xWWGpQYlZtbTVsWmNhNTdMZVVVdElGOWZwSUs2SG1VV3E2dktXNFAwb1Z5S0o5dngxL014WHUKRm1ySUFZam5pTlplNVYwNHYzNER3aTloWFdyZWdVRXFHbHRDVXFSZU5xSTZwSkhHKzduQnZSeHVnenJtOWtSZ0VZclFPZ1p0UG94NgoyT1hkLzhpYlpneWdQZHgyWUdqYXlWOFZ1TCtOVy9CcEsvOTJYZzBHVzYrTit3YUNaaFlrY3kyVHBSa1BQQStDdmFickc2NkZXNmhKCkNtY3ZtWDlkTXVoS1NrRFpCbVdEcEF1eTFzK3JIRk8wY1U4TFhUa0M0ZEpGM254ZWhVcFNaUTJTTlZFUC9TcUgxczNTa2h0ZW9raEcKVk5KZnU5cngzaEVzbTdkRUw2c0RjVC84Z3d3R3hPTkRBd1M5K3hxeHVzak9ONythNnR6NTd4SUJEb3ZyMlNnV3ZIelo1Z1BrK2tidwpaNEFLcmp0UW5mbHc2dlRyTDY1SjB5dWpiUW81TlUzZXhBaEp4amJUQWc5Q3hPQ3hiVUU5SlFWQkpOQXIrb1ErWm9EcHhmcVFZSFBKCk1sMitLMWp1ZGpadldWN3M1ZEo1K1ZaYndPRldhZXpuMGFDSWN3aVpEQjlid1dPTW1HU2VMdFF1WHFLbUpEOEk2NEFqUmZLSHd6cG0KK25DQ1I5d0F3V0Y4d0JzbkdWcWZqeUVQSHZxT3RnMzNFYzlseFc1TURpTVBvVitOZGc0aHhHQnBudUY3eUF0TjdLWEtZcFNKeXhTNQpiUktCY2VZZTQ0QkRqMXRLYjM5RWQzbmJPRXRZSnIrSU1jQWpZY3lmdnEveC9JQnpFUEFHbWZWUHNZUlJGUWVXVUgzRlJKUWRWcUNRCnovT0pFN2pMaDdrV0MxbEloRzRmUDJWS3Zjazljd3JEaVR3Mkk0Z1I1Vk14VDRkMEVQVHFKdjkvM0o0bEh0T0hDZ0g4WlQ5eklZZ0YKdHYzZHZGd0x1Sm0zSnFrd2s2Zy9EcHV4TVpjKzF1YVBTZ2tCVU55WW0zTmltaFY0b2pialFWQnVBYTlQQVRQMzhSSDY2TDlseklvYgovU0FRaUpLUlRia2pMRXlXVFA1R2NIMkJFRWJ0Y29BQ0pwaUJnZUlRUmUzWEQzN0NsYWtTazZGK2dGYmF6empFT1ZKZmxGa1NxWTlYCjR4K091NWpOM1NKOURSK1FpcEZ6MmduaFR3eDNqVWUxMDc3Z2lNN1hBTCtncmpEMzd3MUI0TzlFNHdMMnFFQ0Jab0dFRFJ2REtZL1oKbDBuMThCQ0IwSE9OWkRZTmRHcHpWT05NNUVzZWpBRzdQcWZNK2hWRDJaL2dJTExsWXdIU3d3YTF4UkoxRUtxN20vUDdudGwxRTlFTwpIK1hVQWRLbnhqTUtzbkM3TUtXd1BPeGU1K0dwMXJnbnFjd0laSEtROS81dFB6c3BrbHkvVVFzRVFuWVpTNHRMNVl5ZVhDb1UrVkE5CnNMbEdSaFprMFhWOVcxUUpxTUZYMDIzTFQ1bDBJK2ppeUplM1gwUThqTy9wa1RrdDZZb2UzQzBTalErNUlkQ2M3TjVhd1B1TU5aUGgKdG5lcTQycmwwSFJESWRZUy8yQWhHRHRMWDhhUzQ4ZVN3MTkxY0h1T2tCOEZPaFJjeEplcENPNXk5OCszcEROeWZSRXZScHVMZm1LawordWZMdTNLWVVtaXJpNXpBcEMyR0FVSmlGcHlSMXJ3WGpSeGhIZExHZEZ6R2ZXY1czeGxrNzZudlEzRyttc1dEYlpJRFdnOWE0WHNzCkFveHpWNHp2dDJIdXNmOXRDVnZQVXZyNDFMb1NaSXJXanJPbWxpZFR2S0RYM3hXcEIwcHJXSnBoRVFyZUFmVnNPMjRVdG9VUm43TjEKODBMbFRIK2YwNlZTblNYbU9GZXNDNy9TNHVEdkZTeGRtTEJUdHpLOVNabzZWSkwrbFRFYUdTSDJ4SWJDWFd1dXd5UEFTKzhuSU5HegptRzBBMnNhZndnR2d5S010UnNaeEtoSFc4WG9VaGpKenl5eXJxb2ZyeGl1dUd4N2dpUU94cDdYM2JwWVlmZTlvRzJQSlI0bWRJVVp0CnRtQVRQK3I4dVhaWlZ0ZWVYNEI2c0EwK2J0VW4rVzVleXh0bHg0Yy9uZEdETEdIbXJoTEdUY041THgxZ3RHWG5MZVQzVk0vRXpqcGUKNmR2UkNVcEVDWE1CWFdIVWxleE8wMWhmbHNwN1hmMnc3d1N6THhtVkE4R2dTckVReXRxY2FJNy9VZ0RlV2Qza0U0ZUJpbWp5QlAyNQpZUjRUeUxVeWY3U0xDKzZYK3hIR1NaNFRoNUc0N05HcXYzZ2J3eXRNU0Z4c3dLbVZiVjNMUlUzQ0FrTHgvRVVhOFNZT0RZd1FYT0pECnNndVJ5RzlhWW56VWxRbFA0eHFNWm0vY1o3b1lpUjEyRDRocEFva2ZHSUE9PC94ZW5jOkNpcGhlclZhbHVlPjwveGVuYzpDaXBoZXJEYXRhPjwveGVuYzpFbmNyeXB0ZWREYXRhPjwvc2FtbDpFbmNyeXB0ZWRBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4=";
////	private static final String encryptedResponse = "";
//
//	private static final String encryptedAgriResponse = "";
//
//	@Override
//	public void start() {
//		initialize();
//		JsonObject conf = new JsonObject()
//				.put("saml-metadata-folder", "../../federation/poitou-charentes/metadata")
//				.put("saml-private-key", "../../federation/poitou-charentes/private/private-key.pk8")
//				.put("saml-issuer", "urn:fi:ent:poitou-charentes:1.0");
//		eb = vertx.eventBus();
//		container.deployWorkerVerticle(SamlValidator.class.getName(), conf, 1, true, new Handler<AsyncResult><String>() {
//			@Override
//			public void handle(AsyncResult<String> asyncResult) {
//				if (asyncResult.succeeded()) {
//					startTests();
//				} else {
//					fail(asyncResult.cause().getLocalizedMessage());
//				}
//			}
//		});
//	}
//
//	@Test
//	public void validateSamlSignature() throws Exception {
//		String assertion = new String(Base64.decode(samlResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "validate-signature").putString("response", assertion);
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				assertEquals("ok", event.body().getString("status"));
//				assertTrue(event.body().getBoolean("valid"));
//				testComplete();
//			}
//		});
//	}
//
//	@Test
//	public void invalidSamlSignature() throws Exception {
//		String assertion = new String(Base64.decode(modifiedResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "validate-signature").putString("response", assertion);
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				assertEquals("ok", event.body().getString("status"));
//				assertFalse(event.body().getBoolean("valid"));
//				testComplete();
//			}
//		});
//	}
//
//	@Test
//	public void validateSamlSignatureOfEncryptedResponse() throws Exception {
//		String assertion = new String(Base64.decode(encryptedResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "validate-signature").putString("response", assertion);
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				assertEquals("ok", event.body().getString("status"));
//				assertTrue(event.body().getBoolean("valid"));
//				testComplete();
//			}
//		});
//	}
//
//	@Test
//	public void decryptResponse() throws Exception {
//		String assertion = new String(Base64.decode(encryptedResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "decrypt-assertion").putString("response", assertion);
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				assertEquals("ok", event.body().getString("status"));
//				assertNotNull(event.body().getString("assertion"));
//				testComplete();
//			}
//		});
//	}
//
//	@Test
//	public void validateSignatureAndDecrypt() throws Exception {
//		String assertion = new String(Base64.decode(encryptedResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "validate-signature-decrypt").putString("response", assertion);
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				System.out.println(event.body().getString("assertion"));
//				assertEquals("ok", event.body().getString("status"));
//				assertTrue(event.body().getBoolean("valid"));
//				assertNotNull(event.body().getString("assertion"));
//				testComplete();
//			}
//		});
//	}
//
//	@Test
//	public void validateSignatureAndDecryptAgri() throws Exception {
//		String assertion = new String(Base64.decode(encryptedAgriResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "validate-signature-decrypt").putString("response", assertion);
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				assertEquals("ok", event.body().getString("status"));
//				assertTrue(event.body().getBoolean("valid"));
//				assertNotNull(event.body().getString("assertion"));
//				testComplete();
//			}
//		});
//	}
//
//	@Test
//	public void generateLogoutRequest() throws Exception {
//		String assertion = new String(Base64.decode(encryptedAgriResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "generate-slo-request")
//				.put("NameID", "e0710e87fc67dbf8af3303282160062b")
//				.put("SessionIndex", "bc13317431f8b03b37185845e6578880")
//				.put("IDP", "urn:fi:ac-poitiers:entts:1.0");
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				assertEquals("ok", event.body().getString("status"));
//				try {
//					String sloUri = event.body().getString("slo");
////					System.out.println(sloUri);
//					byte[] slo = Base64.decode(URLDecoder.decode(sloUri
//							.replaceAll("http.*?SAMLRequest=", "")
//							.replaceAll("&RelayState=NULL", "")
//							, "UTF-8"));
//					Inflater inflater = new Inflater();
//					inflater.setInput(slo, 0, slo.length);
//					byte[] buffer = new byte[1024];
//					ByteArrayOutputStream bos = new ByteArrayOutputStream();
//					while (!inflater.finished()) {
//						int resultLength = inflater.inflate(buffer);
//						bos.write(buffer, 0, resultLength);
//					}
//					inflater.end();
//					bos.close();
//					String logoutRequest = new String(bos.toByteArray(), "UTF-8");
//
////					System.out.println(logoutRequest);
//					assertNotNull(logoutRequest);
//					testComplete();
//				} catch (DataFormatException | IOException e) {
//					fail(e.getMessage());
//				}
//			}
//		});
//	}
//
//	@Test
//	public void generateAuthnRequest() throws Exception {
//		String assertion = new String(Base64.decode(encryptedAgriResponse));
//		JsonObject j = new JsonObject()
//				.put("action", "generate-authn-request")
//				.put("IDP", "urn:fi:ac-poitiers:entts:1.0");
//		eb.send("saml", j, new Handler<Message<JsonObject>>() {
//			@Override
//			public void handle(Message<JsonObject> event) {
//				assertEquals("ok", event.body().getString("status"));
//				try {
//					String sloUri = event.body().getString("authn-request");
////					System.out.println(sloUri);
//					byte[] slo = Base64.decode(URLDecoder.decode(sloUri
//							.replaceAll("http.*?SAMLRequest=", "")
//							.replaceAll("&RelayState=.*?$", "")
//							, "UTF-8"));
//					Inflater inflater = new Inflater();
//					inflater.setInput(slo, 0, slo.length);
//					byte[] buffer = new byte[1024];
//					ByteArrayOutputStream bos = new ByteArrayOutputStream();
//					while (!inflater.finished()) {
//						int resultLength = inflater.inflate(buffer);
//						bos.write(buffer, 0, resultLength);
//					}
//					inflater.end();
//					bos.close();
//					String logoutRequest = new String(bos.toByteArray(), "UTF-8");
//
//					System.out.println(logoutRequest);
//					assertNotNull(logoutRequest);
//					testComplete();
//				} catch (DataFormatException | IOException e) {
//					fail(e.getMessage());
//				}
//			}
//		});
//	}
//
//}
