package org.entcore.test.scenarios

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import org.entcore.test.load.Headers._


object ConversationScenario {

  val scn = exec(http("Login teacher")
    .post("""/auth/login""")
    .formParam("""email""", """${teacherLogin}""")
    .formParam("""password""", """blipblop""")
    .check(status.is(302)))
  .exec(http("Get conversation page")
    .get("/conversation/conversation")
    .check(status.is(200)))
  .exec(http("Find visible users or groups")
    .get("/conversation/visible")
    .check(status.is(200), jsonPath("$.groups.id").findAll.transformOption(_.orElse(Some(Nil)))
    .saveAs("conversationTeacherVisibleGroupId"),
    jsonPath("$.users.id").findAll.transformOption(_.orElse(Some(Nil)))
      .saveAs("conversationTeacherVisibleUserId")))
  .exec(http("Create draft message")
    .post("/conversation/draft")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"body":"<p><span style:\"font-family: Arial, Helvetica, sans; font-size: 10.909090995788574px; line-height: 13.991477012634277px; text-align: justify;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. In tempor sem nec lacinia tempus. Proin placerat erat dignissim sollicitudin pulvinar. Ut orci metus, malesuada nec purus at, aliquam gravida dolor. Duis faucibus tincidunt varius. Quisque congue, nulla id condimentum pellentesque, erat orci volutpat libero, vitae commodo magna sem ac enim. In sit amet arcu quis lorem congue facilisis. Maecenas eget tincidunt magna, fringilla mollis leo. Curabitur in massa at metus consectetur porta. Duis vel gravida justo. Donec id libero vel eros dapibus bibendum non vehicula magna. Praesent a nisl quis lacus interdum malesuada sed et urna. Vivamus at massa vel velit dignissim feugiat. Praesent sodales massa eu suscipit vulputate. Integer ut nulla sem. Donec id mi turpis.</span><br></p>","to":[]}"""))
    .check(status.is(201), jsonPath("$.id").find.saveAs("conversationDraftId")))
  .exec(http("Update draft")
    .put("/conversation/draft/${conversationDraftId}")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"subject":"Lorem ipsum"}"""))
    .check(status.is(200)))
  .exec(http("Send message")
    .post("/conversation/send?id=${conversationDraftId}")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"to":["${studentId}"],"cc":["${profilGroupIds(0)}"]}"""))
    .check(status.is(200), jsonPath("$.sent").find.not("0")))
  .exec(http("List outbox")
    .get("/conversation/list/OUTBOX")
    .check(status.is(200), jsonPath("$[0].id").find.is("${conversationDraftId}"),
      jsonPath("$[0].subject").find.is("Lorem ipsum")))
  .exec(http("Move sent message to trash")
    .put("/conversation/trash")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"id":["${conversationDraftId}"]}"""))
    .check(status.is(200)))
  .exec(http("List outbox")
    .get("/conversation/list/OUTBOX")
    .check(status.is(200), jsonPath("$[0].id").find.not("${conversationDraftId}")))
  .exec(http("List trash")
    .get("/conversation/list/TRASH")
    .check(status.is(200), jsonPath("$[0].id").find.is("${conversationDraftId}")))
//  .exec(http("Delete message")
//    .delete("/conversation/delete?id=${conversationDraftId}")
//    .check(status.is(204)))
//  .pause(1)
  .exec(http("Logout teacher user")
    .get("""/auth/logout""")
    .check(status.is(302)))
  .exec(http("Login student")
    .post("""/auth/login""")
    .formParam("""email""", """${studentLogin}""")
    .formParam("""password""", """blipblop""")
    .check(status.is(302)))
  .exec(http("List inbox message before read")
    .get("/conversation/list/INBOX")
    .check(status.is(200), jsonPath("$[0].id").find.saveAs("conversationMessageId"),
      jsonPath("$[0].unread").find.transformOption(_.map(u => String.valueOf(u))).is("true")))
  .exec(http("Count unread messages")
    .get("/conversation/count/INBOX?unread=true")
    .check(status.is(200), jsonPath("$.count").find.saveAs("unreadMessageNumber")))
  .exec(http("Read message")
    .get("/conversation/message/${conversationMessageId}")
    .check(status.is(200), jsonPath("$.body").find.exists, jsonPath("$.state").find.is("SENT")))
  .exec(http("Count unread messages")
    .get("/conversation/count/INBOX?unread=true")
    .check(status.is(200), jsonPath("$.count").find.transformOption(_.map(c => String.valueOf(Integer.valueOf(c) + 1))).is("${unreadMessageNumber}"),
      jsonPath("$.count").find.not("${unreadMessageNumber}")))
  .exec(http("List inbox message after read")
    .get("/conversation/list/INBOX")
    .check(status.is(200), jsonPath("$[0].unread").find.transformOption(_.map(u => String.valueOf(u))).is("false")))
  .exec(http("Student send message to teacher group")
    .post("/conversation/send")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"body":"Nop :'(","to":["${profilGroupIds(0)}"]}"""))
    .check(status.is(401)))
  .exec(http("Student reply to all users or groups of previous message including teacher group")
    .post("/conversation/send?In-Reply-To=${conversationMessageId}")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"body":"Nop :'(","to":["${profilGroupIds(0)}"]}"""))
    .check(status.is(200)))
  .exec(http("Move initially received message to trash")
    .put("/conversation/trash")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"id":["${conversationMessageId}"]}"""))
    .check(status.is(200)))
  .exec(http("List trash")
    .get("/conversation/list/TRASH")
    .check(status.is(200), jsonPath("$[0].id").find.is("${conversationMessageId}")))
  .exec(http("Restore message")
    .put("/conversation/restore")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"id":["${conversationMessageId}"]}"""))
    .check(status.is(200)))
  .exec(http("List inbox")
    .get("/conversation/list/INBOX")
    .check(status.is(200), jsonPath("$[0].id").find.is("${conversationMessageId}")))

   /////////////
  // FOLDERS //

  .exec(http("Get folder depth")
    .get("/conversation/max-depth")
    .check(status.is(200), jsonPath("$['max-depth']").find.transform(_.toInt).greaterThan(-1)))
  .exec(http("Create a folder")
    .post("/conversation/folder")
    .header("Content-Type", "application/json")
    .body(StringBody("""{ "name": "folder" }"""))
    .check(status.is(201)))
  .exec(http("List folders at depth 1")
    .get("/conversation/folders/list")
    .check(
      status.is(200),
      jsonPath("$[0].name").find.is("folder"),
      jsonPath("$[0].id").find.saveAs("folderId")))
  .exec(http("Create a subfolder")
    .post("/conversation/folder")
    .header("Content-Type", "application/json")
    .body(StringBody("""{ "name": "subfolder", "parentId": "${folderId}" }"""))
    .check(status.is(201)))
  .exec(http("List folders at depth 2")
    .get("/conversation/folders/list?parentId=${folderId}")
    .check(
      status.is(200),
      jsonPath("$[0].name").find.is("subfolder"),
      jsonPath("$[0].id").find.saveAs("subfolderId")))
  .exec(http("Rename a folder")
    .put("/conversation/folder/${subfolderId}")
    .header("Content-Type", "application/json")
    .body(StringBody("""{ "name": "renamed subfolder" }"""))
    .check(status.is(200)))
  .exec(http("Create a draft")
    .post("/conversation/draft")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"body":"<p><span style:\"font-family: Arial, Helvetica, sans; font-size: 10.909090995788574px; line-height: 13.991477012634277px; text-align: justify;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. In tempor sem nec lacinia tempus. Proin placerat erat dignissim sollicitudin pulvinar. Ut orci metus, malesuada nec purus at, aliquam gravida dolor. Duis faucibus tincidunt varius. Quisque congue, nulla id condimentum pellentesque, erat orci volutpat libero, vitae commodo magna sem ac enim. In sit amet arcu quis lorem congue facilisis. Maecenas eget tincidunt magna, fringilla mollis leo. Curabitur in massa at metus consectetur porta. Duis vel gravida justo. Donec id libero vel eros dapibus bibendum non vehicula magna. Praesent a nisl quis lacus interdum malesuada sed et urna. Vivamus at massa vel velit dignissim feugiat. Praesent sodales massa eu suscipit vulputate. Integer ut nulla sem. Donec id mi turpis.</span><br></p>","to":[]}"""))
    .check(status.is(201), jsonPath("$.id").find.saveAs("draftId")))
  .exec(http("Move the draft into the subfolder")
    .put("/conversation/move/userfolder/${subfolderId}?id=${draftId}")
    .header("Content-Length", "0")
    .check(status.is(200)))
  .exec(http("List messages contained inside the subfolder")
    .get("/conversation/list/${subfolderId}?restrain=")
    .check(status.is(200), jsonPath("$[0].id").find.is("${draftId}")))
  .exec(http("Trash the subfolder")
    .put("/conversation/folder/trash/${subfolderId}")
    .header("Content-Length", "0")
    .check(status.is(200)))
  .exec(http("List trashed folders")
    .get("/conversation/folders/list?trash=")
    .check(
      status.is(200),
      jsonPath("$[0].name").find.is("renamed subfolder"),
      jsonPath("$[0].id").find.is("${subfolderId}")))
  .exec(http("Restore a trashed folder")
    .put("/conversation/folder/restore/${subfolderId}")
    .check(status.is(200)))
  .exec(http("Remove a message from a user folder and restore it to the system folder")
    .put("/conversation/move/root?id=${draftId}")
    .check(status.is(200)))
  .exec(http("Ensure the message has properly been removed")
    .get("/conversation/list/${subfolderId}?restrain=")
    .check(status.is(200), bodyString.find.is("[]")))
  .exec(http("Trash the root folder")
    .put("/conversation/folder/trash/${folderId}")
    .check(status.is(200)))
  .exec(http("Delete the root folder")
    .delete("/conversation/folder/${folderId}")
    .check(status.is(200)))
  .exec(http("Ensure that all folders are deleted")
    .get("/conversation/folders/list?trash=")
    .check(status.is(200), bodyString.find.is("[]")))

   /////////////////
  // ATTACHMENTS //

  .exec(http("Login teacher")
    .post("""/auth/login""")
    .formParam("""email""", """${teacherLogin}""")
    .formParam("""password""", """blipblop""")
    .check(status.is(302)))
  .exec(http("Get conversation page")
    .get("/conversation/conversation")
    .check(status.is(200)))
  .exec(http("Create draft message")
    .post("/conversation/draft")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"subject":"Attachments", "body":"<p>Testing attachments.</p>","to":[]}"""))
    .check(status.is(201), jsonPath("$.id").find.saveAs("attachmentDraftId")))
  .exec(http("Check teacher quota before adding the attachment")
    .get("""/workspace/quota/user/${teacherId}""")
    .check(status.is(200), jsonPath("$.storage").find.saveAs("teacherStorageInitial")))
  .exec(http("Add attachment")
    .post("""/conversation/message/${attachmentDraftId}/attachment""")
    .headers(headers_202)
    .body(RawFileBody("RecordSimulation_request_202.txt"))
    .check(status.is(200)))
  .exec(http("Get message details & check that the attachment is listed")
    .get("/conversation/message/${attachmentDraftId}")
    .check(
      status.is(200),
      jsonPath("$.attachments[0::].id").find.saveAs("attachmentId")))
  .exec(http("Check teacher quota after adding the attachment")
    .get("""/workspace/quota/user/${teacherId}""")
    .check(status.is(200), jsonPath("$.storage").find.greaterThan("${teacherStorageInitial}")))
  .exec(http("Send message")
    .post("/conversation/send?id=${attachmentDraftId}")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"to":["${studentId}"],"cc":[]}""")))
  .exec(http("List outbox")
      .get("/conversation/list/OUTBOX")
      .check(status.is(200), jsonPath("$[0].id").find.is("${attachmentDraftId}")))
  .exec(http("Delete attachment")
    .delete("/conversation/message/${attachmentDraftId}/attachment/${attachmentId}")
    .check(status.is(200)))
  .exec(http("Check teacher quota after deleting the attachment")
    .get("""/workspace/quota/user/${teacherId}""")
    .check(status.is(200), jsonPath("$.storage").find.is("${teacherStorageInitial}")))
  .exec(http("Login student")
    .post("""/auth/login""")
    .formParam("""email""", """${studentLogin}""")
    .formParam("""password""", """blipblop""")
    .check(status.is(302)))
  .exec(http("List inbox message")
    .get("/conversation/list/INBOX")
    .check(status.is(200), jsonPath("$[0].id").find.saveAs("attachmentDraftId"),
      jsonPath("$[0].unread").find.transformOption(_.map(u => String.valueOf(u))).is("true")))
  .exec(http("Get message details & check that the attachment is listed")
    .get("/conversation/message/${attachmentDraftId}")
    .check(status.is(200)))
  .exec(http("Download the attachment")
    .get("/conversation/message/${attachmentDraftId}/attachment/${attachmentId}")
    .check(status.is(200)))
  .exec(http("Check student quota before deleting the attachment")
    .get("""/workspace/quota/user/${studentId}""")
    .check(status.is(200), jsonPath("$.storage").find.saveAs("studentStorageInitial")))
  .exec(http("Move message to trash")
    .put("/conversation/trash")
    .header("Content-Type", "application/json")
    .body(StringBody("""{"id":["${attachmentDraftId}"]}"""))
    .check(status.is(200)))
//Disabled because of an error thrown (by Netty) when checking for status 204
  //.exec(http("Delete message")
    //.delete("/conversation/delete?id=${attachmentDraftId}")
    //.check(status.is(204)))
  .exec(http("Delete attachment")
    .delete("/conversation/message/${attachmentDraftId}/attachment/${attachmentId}")
    .check(status.is(200)))
  .exec(http("Check student quota after deleting the attachment")
    .get("""/workspace/quota/user/${studentId}""")
    .check(status.is(200), jsonPath("$.storage").find.lessThan("${studentStorageInitial}")))
}
