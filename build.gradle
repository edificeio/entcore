import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent 

plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '2.0.1'
}

if (!hasProperty('odeUsername')) {
  ext.odeUsername = ''
}
if (!hasProperty('odePassword')) {
  ext.odePassword = ''
}

subprojects {
  apply plugin:'java'
  apply plugin:'maven'
  apply plugin:'maven-publish'
  apply plugin:'com.github.johnrengelman.shadow'

	repositories {
  mavenLocal()
  maven {
    url "https://maven.opendigitaleducation.com/nexus/content/groups/public"
  }
  mavenCentral()
  jcenter()
  maven {
    url "https://oss.sonatype.org/content/repositories/iovertx-3720/"
  }
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots"
  }
  maven { url "https://plugins.gradle.org/m2/" }
	}

  configurations {
    provided
    runtime.exclude module: 'vertx-core'
  }

  sourceSets {
    main { compileClasspath += configurations.provided }
    test {
      runtimeClasspath += configurations.compileOnly
      resources.srcDirs = ["src/test/resources"]
    }
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  task generateCommitId {
    doLast {
      def commitId = 'unknown'
      def stdout = new ByteArrayOutputStream()
      try {
        def result = exec {
          commandLine 'git', 'rev-parse', 'HEAD'
          standardOutput = stdout
        }
        commitId = stdout.toString().trim()
      } catch (Exception e) {
        e.printStackTrace()
        commitId = 'error'
      }
      project.ext.set('commitId', commitId)
      def branch = 'unknown'
      try {
        def stdoutBranch = new ByteArrayOutputStream()
        def resultBranch = exec {
          commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
          standardOutput = stdoutBranch
        }
        branch = stdoutBranch.toString().trim()
      } catch (Exception e) {
        e.printStackTrace()
        branch = 'error'
      }
      project.ext.set('branchName', branch)
      def date = new Date()
      def formattedDate = date.format('yyyyMMddHHmmss')
      project.ext.set('buildTime', formattedDate)
    }
  }

  compileJava {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
    dependsOn generateCommitId
  }

  compileTestJava {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
  }
  dependencies {
    compileOnly "io.vertx:vertx-core:$vertxVersion"
    testCompile "io.vertx:vertx-unit:$vertxVersion"
    testCompile "io.vertx:vertx-codegen:$vertxVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.testcontainers:testcontainers:$testContainerVersion"
    testCompile "org.testcontainers:mongodb:$testContainerVersion"
    testCompile "org.testcontainers:postgresql:$testContainerVersion"
    testCompile "org.testcontainers:elasticsearch:$testContainerVersion"
    testCompile "fr.wseduc:mod-postgresql:$modPostgresVersion:fat"
    testCompile "io.vertx:mod-mongo-persistor:$modMongoVersion:fat"
  }

  test {
    classpath += configurations.compileOnly

    testLogging {
      // set options for log level LIFECYCLE
      events TestLogEvent.FAILED,
              TestLogEvent.PASSED,
              TestLogEvent.SKIPPED,
              TestLogEvent.STANDARD_OUT
      exceptionFormat TestExceptionFormat.FULL
      showExceptions true
      showCauses true
      showStackTraces true

      // set options for log level DEBUG and INFO
      debug {
        events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
      }
      info.events = debug.events
      info.exceptionFormat = debug.exceptionFormat

      afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
          def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
          def startItem = '|  ', endItem = '  |'
          def repeatLength = startItem.length() + output.length() + endItem.length()
          println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
      }
    }
  }

  jar {
    sourceSets.main.resources.srcDirs += [ "deployment" ]
    manifest {
      attributes(
          "Main-Verticle": "service:mod",
          "SCM-Commit-Id": "${-> project.ext.commitId}",
          "SCM-Branch": "${-> project.ext.branchName}",
          "Build-Time": "${-> project.ext.buildTime}"
      )
    }
  }

  shadowJar {
    classifier = 'fat'
    archiveName = "${modowner}~${project.name}~$version-$classifier.$extension"
      mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
      }
  }

  install {
    repositories.mavenInstaller {
      pom.version = "$version"
        pom.artifactId = "${project.name}"
        pom.groupId = "${modowner}"
    }
  }

  publishing {
    repositories {
      if (version.endsWith("SNAPSHOT")) {
        maven {
          name 'Snapshots'
            url 'https://maven.opendigitaleducation.com/nexus/content/repositories/snapshots/'
            credentials {
              username "${odeUsername}"
                password "${odePassword}"
            }
        }
      } else {
        maven {
          name 'Releases'
            url 'https://maven.opendigitaleducation.com/nexus/content/repositories/releases/'
            credentials {
              username "${odeUsername}"
                password "${odePassword}"
            }
        }
      }
    }
    publications {
      if (!"common".equals(project.name) && !"tests".equals(project.name)) {
        maven(MavenPublication) {
          groupId "${modowner}"
            artifact("build/libs/${modowner}~${project.name}~$version-fat.jar") { classifier "fat" }
        }
      }
      if ("common".equals(project.name) || "tests".equals(project.name) || "session".equals(project.name)) {
        mavenJava(MavenPublication) {
          from components.java
          groupId "${modowner}"
        }
      }
    }
  }

  javadoc {
    options.encoding = 'UTF-8'
    classpath = configurations.provided
    classpath += configurations.compile
  }

	afterEvaluate { project ->
		project.tasks['shadowJar'].doLast {
			copy {
				into 'mods'
				from "${project.name}/build/libs/$archiveName"
			}
		}
		project.tasks['clean'].doLast {
			rootProject.delete "mods"
		}
	}
}

project(':common') {
  dependencies {
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "fr.wseduc:vertx-swift-client:$vertxSwiftClientVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
    compile "io.vertx:vertx-redis-client:$vertxVersion"
    compile "io.vertx:vertx-pg-client:$vertxVersion"
    compile "com.ongres.scram:client:$scramVersion"
    compile "org.mongodb:mongodb-driver-async:$mongoVersion"
    compile ("io.vertx:vertx-mongo-client:$vertxVersion") {
      exclude group: 'org.mongodb', module: 'mongodb-driver-async'
    }
    compile "io.vertx:vertx-micrometer-metrics:$vertxVersion"
    compile "io.micrometer:micrometer-registry-prometheus:$micrometerPrometheusVersion"
    compile "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:$owaspVersion"
    testCompile project(':test')
    compile "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
  }
}

project(':admin') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
  }
}

project(':app-registry') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    testCompile project(':test')
  }
}

project(':audience') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    testCompile project(':test')
  }
}

project(':auth') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "jp.eisbahn:oauth2-server:1.3.1"
    compile "org.opensaml:opensaml:2.6.4"
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "joda-time:joda-time:$jodaTimeVersion"
    compile "fr.wseduc:cas-server-async:$casVersion"
    testCompile project(':test')
  }
}

project(':communication') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    testCompile project(':test')
  }
}

project(':directory') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
    testCompile project(':test')
  }
}

project(':infra') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    testCompile project(':test')
  }
}

project(':portal') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
  }
}

project(':workspace') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "com.sun.jna:jna:$jnaVersion"
    compile "net.sf:lamejb:$lamejbVersion"
    testCompile project(':test')
    configurations.testCompile.exclude group: 'com.sun.jna', module: 'jna'
  }
}

project(':conversation') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    testCompile project(':test')
  }
}

project(':feeder') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "com.opencsv:opencsv:$opencsvVersion"
    compile "com.googlecode.juniversalchardet:juniversalchardet:$juniversalchardetVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
    testCompile project(':test')
  }
}

project(':archive') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "io.vertx:vertx-web-client:$vertxVersion"
  }
}

project(':timeline') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    testCompile project(':test')
  }
}

project(':cas') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:cas-server-async:$casVersion"
    testCompile project(':test')
  }
}

project(':session') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    testCompile project(':test')
  }
}

project(':test') {
  //test has compile deps but is used as testCompile
  dependencies {
    compileOnly project(':common')
    compile "io.vertx:vertx-unit:$vertxVersion"
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "org.testcontainers:neo4j:$testContainerVersion"
    compile "org.testcontainers:mongodb:$testContainerVersion"
    compile "org.testcontainers:elasticsearch:$testContainerVersion"
    compile "org.testcontainers:postgresql:$testContainerVersion"
    compile "fr.wseduc:mod-postgresql:$modPostgresVersion:fat"
    compile "io.vertx:mod-mongo-persistor:$modMongoVersion:fat"
    compile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    compile 'org.mockito:mockito-inline:4.11.0'
    configurations.compile.exclude(group: 'io.gatling', module: 'gatling-app')
    configurations.compile.exclude(group: 'io.gatling', module: 'gatling-recorder')
  }
}

project(':tests') {
  apply plugin: 'scala'

  dependencies {
    compile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    compile 'net.minidev:json-smart:1.1.1'
  }

}

/*
task runEnt(type:Exec, dependsOn: subprojects.copyMod) {
  workingDir '.'

  //on windows:
  commandLine 'cmd', '/c', 'run.bat'

  //on linux
  commandLine './run.sh'

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }
}

task stopEnt(type:Exec) {
  workingDir '.'

  //on windows:
  commandLine 'cmd', '/c', 'stop.bat'

  //on linux
  commandLine './stop.sh'

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }
}

task integrationTest(dependsOn: [subprojects.copyMod, project(':tests').compileTestScala]) << {
    project(':tests').tasks.gatling.execute()
}

project(':audience') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    testCompile project(':test')
  }
}

integrationTest.doFirst {
    tasks.runEnt.execute()

}

gradle.taskGraph.afterTask { task, TaskState state ->
    if (task == integrationTest) {
        tasks.stopEnt.execute()
    }
}
*/

