apply from: "gradle/setup.gradle"
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

subprojects {
  apply plugin: 'eclipse'
  apply plugin: 'java'

  apply from: "$rootDir/gradle/vertx.gradle"

	repositories {
		maven {
			credentials {
				username 'admin'
				password 'admin'
			}
			url "http://maven.web-education.net/nexus/content/groups/public"
		}
	}

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  compileJava {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
  }

  compileTestJava {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
  }

  dependencies {
    provided "io.vertx:vertx-core:$vertxVersion"
    provided "io.vertx:vertx-platform:$vertxVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "io.vertx:testtools:$toolsVersion"
  }

  javadoc {
    options.encoding = 'UTF-8'
    classpath = configurations.provided
    classpath += configurations.compile
  }

	afterEvaluate { project ->
		project.tasks['copyMod'].doLast {
			copy {
				into 'mods'
				from "${project.name}/build/mods"
			}
		}
		project.tasks['clean'].doLast {
			rootProject.delete "mods/${project.ext.moduleName}"
		}
	}
}

def generateMissingI18n() {
  JsonSlurper jsonSlurper = new JsonSlurper()
  File rootDir = new File(".")
  rootDir.eachFileRecurse {
    if (it.isDirectory() && ("i18n".equals(it.getName()) || ("timeline".equals(it.getName()) && it.getParent().endsWith("i18n")))) {
      Map i18n = [:]
      it.eachFileMatch(~/.+.json/) { file ->
        def t = file.text
        i18n.put(file.getName(), (Map) jsonSlurper.parseText((t != null && !t.empty) ? t : "{}"))
      }
      Map fr = i18n.remove("fr.json")
      new File(it, "fr.json").withWriter{ it << JsonOutput.prettyPrint(JsonOutput.toJson(fr.sort())) }
      i18n.each { key, lang ->
        Map out = fr.findAll({true})
        out.putAll(lang)
        new File(it, key).withWriter{ it << JsonOutput.prettyPrint(JsonOutput.toJson(out.sort())) }
      }
    }
  }
}

task generateI18n(description:'Generate missing keys in i18n files') << {
  generateMissingI18n()
}

project(':common') {
  dependencies {
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "fr.wseduc:vertx-swift-client:$vertxSwiftClientVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
  }
}

project(':app-registry') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}

project(':auth') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "jp.eisbahn:oauth2-server:1.2-SNAPSHOT"
    compile "org.opensaml:opensaml:2.6.4"
    compile "org.slf4j:slf4j-api:1.7.12"
  }
}

project(':communication') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}

project(':directory') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}

project(':infra') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "fr.wseduc:web-utils:$webUtilsVersion"
  }
}

project(':portal') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
  }
}

project(':workspace') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}

project(':conversation') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}

project(':feeder') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "net.sf.opencsv:opencsv:$opencsvVersion"
    compile "com.googlecode.juniversalchardet:juniversalchardet:$juniversalchardetVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
  }
}

project(':archive') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
  }
}

project(':timeline') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
  }
}

project(':cas') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:cas-server-async:$casVersion"
  }
}

project(':session') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}

project(':tests') {
  apply plugin: 'scala'

  dependencies {
    compile 'io.gatling.highcharts:gatling-charts-highcharts:2.0.3'
    compile 'net.minidev:json-smart:1.1.1'
  }

  task gatling(dependsOn: 'compileTestScala') << {
    def simulations =  new java.io.File(sourceSets.test.output.classesDir.getPath() + File.separator + 'org' + File.separator + 'entcore' + File.separator + 'test' + File.separator + 'simulations')

    logger.lifecycle(" ---- Executing all Gatling scenarios from: ${simulations} ----")
    simulations.eachFileRecurse { file ->
      if (file.isFile()) {
        //Remove the full path, .class and replace / with a .
        logger.debug("Tranformed file ${file} into")
          def gatlingScenarioClass = (file.getPath() - (sourceSets.test.output.classesDir.getPath() + File.separator) - '.class')
          .replace(File.separator, '.')

          logger.debug("Tranformed file ${file} into scenario class ${gatlingScenarioClass}")
          System.setProperty("gatling.http.connectionTimeout", "300000")
          javaexec {
            main = 'io.gatling.app.Gatling'
              classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
            args  '-bf',
            sourceSets.test.output.classesDir,
            '-rbf',
            sourceSets.test.output.classesDir,
            '-s',
            gatlingScenarioClass,
            '-rf',
            'build/reports/gatling'
          }
      }
    }

    logger.lifecycle(" ---- Done executing all Gatling scenarios ----")
  }

}

task runEnt(type:Exec, dependsOn: subprojects.copyMod) {
  workingDir '.'

  //on windows:
  commandLine 'cmd', '/c', 'run.bat'

  //on linux
  commandLine './run.sh'

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }
}

task stopEnt(type:Exec) {
  workingDir '.'

  //on windows:
  commandLine 'cmd', '/c', 'stop.bat'

  //on linux
  commandLine './stop.sh'

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }
}

task integrationTest(dependsOn: [subprojects.copyMod, project(':tests').compileTestScala]) << {
    project(':tests').tasks.gatling.execute()
}


integrationTest.doFirst {
    tasks.runEnt.execute()

}

gradle.taskGraph.afterTask { task, TaskState state ->
    if (task == integrationTest) {
        tasks.stopEnt.execute()
    }
}
