import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '2.0.1'
}

if (!hasProperty('odeUsername')) {
  ext.odeUsername = ''
}
if (!hasProperty('odePassword')) {
  ext.odePassword = ''
}

subprojects {
  apply plugin:'java'
  apply plugin:'maven'
  apply plugin:'maven-publish'
  apply plugin:'com.github.johnrengelman.shadow'

	repositories {
  mavenLocal()
  maven {
    url "https://maven.opendigitaleducation.com/nexus/content/groups/public"
  }
  mavenCentral()
  jcenter()
  maven {
    url "https://oss.sonatype.org/content/repositories/iovertx-3720/"
  }
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots"
  }
  maven { url "https://plugins.gradle.org/m2/" }
	}

  configurations {
    provided
    runtime.exclude module: 'vertx-core'
  }

  sourceSets {
    main { compileClasspath += configurations.provided }
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  compileJava {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
  }

  compileTestJava {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
  }
  dependencies {
    compileOnly "io.vertx:vertx-core:$vertxVersion"
    testCompile "junit:junit:$junitVersion"
  }

  jar {
    manifest {
      attributes(
          "Main-Verticle": "service:mod"
      )
    }
  }

  shadowJar {
    classifier = 'fat'
    archiveName = "${modowner}~${project.name}~$version-$classifier.$extension"
      mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
      }
  }

  install {
    repositories.mavenInstaller {
      pom.version = "$version"
        pom.artifactId = "${project.name}"
        pom.groupId = "${modowner}"
    }
  }

  publishing {
    repositories {
      if (version.endsWith("SNAPSHOT")) {
        maven {
          name 'Snapshots'
            url 'https://maven.opendigitaleducation.com/nexus/content/repositories/snapshots/'
            credentials {
              username "${odeUsername}"
                password "${odePassword}"
            }
        }
      } else {
        maven {
          name 'Releases'
            url 'https://maven.opendigitaleducation.com/nexus/content/repositories/releases/'
            credentials {
              username "${odeUsername}"
                password "${odePassword}"
            }
        }
      }
    }
    publications {
      if (!"common".equals(project.name) && !"tests".equals(project.name)) {
        maven(MavenPublication) {
          groupId "${modowner}"
            artifact("build/libs/${modowner}~${project.name}~$version-fat.jar") { classifier "fat" }
        }
      }
      if ("common".equals(project.name) || "tests".equals(project.name)) {
        mavenJava(MavenPublication) {
          from components.java
          groupId "${modowner}"
        }
      }
    }
  }

  javadoc {
    options.encoding = 'UTF-8'
    classpath = configurations.provided
    classpath += configurations.compile
  }

	afterEvaluate { project ->
		project.tasks['shadowJar'].doLast {
			copy {
				into 'mods'
				from "${project.name}/build/libs/$archiveName"
			}
		}
		project.tasks['clean'].doLast {
			rootProject.delete "mods"
		}
	}
}

project(':common') {
  dependencies {
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "fr.wseduc:vertx-swift-client:$vertxSwiftClientVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
  }
}

project(':admin') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
  }
}

project(':app-registry') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}


project(':auth') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "jp.eisbahn:oauth2-server:1.2.0"
    compile "org.opensaml:opensaml:2.6.4"
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "joda-time:joda-time:$jodaTimeVersion"
  }
}

project(':communication') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}

project(':directory') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
  }
}

project(':infra') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "fr.wseduc:web-utils:$webUtilsVersion"
  }
}

project(':portal') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
  }
}

project(':workspace') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "com.sun.jna:jna:$jnaVersion"
    compile "net.sf:lamejb:$lamejbVersion"
  }
}

project(':conversation') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:web-utils:$webUtilsVersion"
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
  }
}

project(':feeder') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
    compile "com.opencsv:opencsv:$opencsvVersion"
    compile "com.googlecode.juniversalchardet:juniversalchardet:$juniversalchardetVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
  }
}

project(':archive') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
  }
}

project(':timeline') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
  }
}

project(':cas') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:cas-server-async:$casVersion"
  }
}

project(':session') {
  dependencies {
    compile project(':common')
    compile "fr.wseduc:mongodb-helper:$mongodbHelperVersion"
  }
}


project(':tests') {
  apply plugin: 'scala'

  dependencies {
    compile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    compile 'net.minidev:json-smart:1.1.1'
  }

  task gatling(dependsOn: 'compileTestScala') << {
    def classesDir = sourceSets.test.output.classesDir.getPath().replace("java", "scala")
    def simulations =  new java.io.File(classesDir + File.separator + 'org' + File.separator + 'entcore' + File.separator + 'test' + File.separator + 'simulations')

    logger.lifecycle(" ---- Executing all Gatling scenarios from: ${simulations} ----")
    simulations.eachFileRecurse { file ->
      if (file.isFile()) {
        //Remove the full path, .class and replace / with a .
        logger.debug("Tranformed file ${file} into")
          def gatlingScenarioClass = (file.getPath() - (classesDir + File.separator) - '.class')
          .replace(File.separator, '.')

          logger.debug("Tranformed file ${file} into scenario class ${gatlingScenarioClass}")
          System.setProperty("gatling.http.connectionTimeout", "300000")
          javaexec {
            main = 'io.gatling.app.Gatling'
              classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
            args  '-bf',
            classesDir,
            '-s',
            gatlingScenarioClass,
            '-rf',
            'build/reports/gatling'
          }
      }
    }

    logger.lifecycle(" ---- Done executing all Gatling scenarios ----")
  }

}

/*
task runEnt(type:Exec, dependsOn: subprojects.copyMod) {
  workingDir '.'

  //on windows:
  commandLine 'cmd', '/c', 'run.bat'

  //on linux
  commandLine './run.sh'

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }
}

task stopEnt(type:Exec) {
  workingDir '.'

  //on windows:
  commandLine 'cmd', '/c', 'stop.bat'

  //on linux
  commandLine './stop.sh'

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }
}

task integrationTest(dependsOn: [subprojects.copyMod, project(':tests').compileTestScala]) << {
    project(':tests').tasks.gatling.execute()
}


integrationTest.doFirst {
    tasks.runEnt.execute()

}

gradle.taskGraph.afterTask { task, TaskState state ->
    if (task == integrationTest) {
        tasks.stopEnt.execute()
    }
}
*/

